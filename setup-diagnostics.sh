#!/bin/bash

# Bash —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å Initial Setup –Ω–∞ Ubuntu —Å–µ—Ä–≤–µ—Ä–µ
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./setup-diagnostics.sh

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
RESTART_SERVICES=false
FORCE_SETUP_MODE=false
BASE_URL="https://rare-books.ru"
VERBOSE=false

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        --restart-services)
            RESTART_SERVICES=true
            shift
            ;;
        --force-setup-mode)
            FORCE_SETUP_MODE=true
            shift
            ;;
        --base-url)
            BASE_URL="$2"
            shift 2
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
            echo "–û–ø—Ü–∏–∏:"
            echo "  --restart-services   –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Docker —Å–µ—Ä–≤–∏—Å—ã"
            echo "  --force-setup-mode   –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º setup"
            echo "  --base-url URL       –ë–∞–∑–æ–≤—ã–π URL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: https://rare-books.ru)"
            echo "  --verbose           –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
            echo "  -h, --help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            exit 0
            ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            exit 1
            ;;
    esac
done

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${GREEN}üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RareBooksService${NC}"
    echo "============================================================"
}

print_section() {
    echo -e "\n${YELLOW}$1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP endpoint
test_endpoint() {
    local url="$1"
    local method="${2:-GET}"
    local data="$3"
    
    if [[ $VERBOSE == true ]]; then
        echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: $method $url"
    fi
    
    if [[ -n "$data" ]]; then
        response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X "$method" \
            -H "Content-Type: application/json" \
            -d "$data" \
            --connect-timeout 30 \
            --max-time 60 \
            "$url" 2>/dev/null)
    else
        response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X "$method" \
            --connect-timeout 30 \
            --max-time 60 \
            "$url" 2>/dev/null)
    fi
    
    http_code=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
    body=$(echo "$response" | sed -e 's/HTTPSTATUS\:.*//g')
    
    echo "$http_code|$body"
}

# –ù–∞—á–∞–ª–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
print_header

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
print_section "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
if command -v docker &> /dev/null; then
    if docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null; then
        print_success "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã"
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    fi
else
    print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# 2. –¢–µ—Å—Ç endpoint'–∞ /api/test/setup-status
print_section "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Test API..."
test_result=$(test_endpoint "$BASE_URL/api/test/setup-status")
http_code=$(echo "$test_result" | cut -d'|' -f1)
body=$(echo "$test_result" | cut -d'|' -f2-)

if [[ "$http_code" == "200" ]]; then
    print_success "Test API —Ä–∞–±–æ—Ç–∞–µ—Ç"
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
    if echo "$body" | jq . >/dev/null 2>&1; then
        timestamp=$(echo "$body" | jq -r '.timestamp // "N/A"')
        is_setup_needed=$(echo "$body" | jq -r '.isSetupNeeded // "N/A"')
        
        echo "   –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: $timestamp"
        echo "   –¢—Ä–µ–±—É–µ—Ç—Å—è setup: $is_setup_needed"
        
        if [[ "$is_setup_needed" == "true" ]]; then
            print_warning "–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
        else
            print_info "–°–∏—Å—Ç–µ–º–∞ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        fi
    else
        echo "   –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON"
    fi
else
    print_error "Test API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $http_code)"
    if [[ $VERBOSE == true ]]; then
        echo "   –û—Ç–≤–µ—Ç: ${body:0:200}..."
    fi
fi

# 3. –¢–µ—Å—Ç endpoint'–∞ /api/setup (GET)
print_section "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Setup API (GET)..."
setup_get_result=$(test_endpoint "$BASE_URL/api/setup")
setup_get_code=$(echo "$setup_get_result" | cut -d'|' -f1)
setup_get_body=$(echo "$setup_get_result" | cut -d'|' -f2-)

if [[ "$setup_get_code" == "200" ]]; then
    print_success "Setup API (GET) —Ä–∞–±–æ—Ç–∞–µ—Ç"
    if [[ "$setup_get_body" == *"<html>"* ]]; then
        print_success "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
    else
        print_info "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –æ—Ç–≤–µ—Ç (—Å–∏—Å—Ç–µ–º–∞ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)"
    fi
elif [[ "$setup_get_code" == "403" ]]; then
    print_info "Setup API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 403 (—Å–∏—Å—Ç–µ–º–∞ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)"
else
    print_error "Setup API (GET) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $setup_get_code)"
    if [[ $VERBOSE == true ]]; then
        echo "   –û—Ç–≤–µ—Ç: ${setup_get_body:0:200}..."
    fi
fi

# 4. –¢–µ—Å—Ç endpoint'–∞ /api/setup/initialize (POST)
print_section "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Setup API (POST)..."
test_payload='{"adminEmail":"test@example.com","adminPassword":"testpass123","booksConnectionString":"test","usersConnectionString":"test","jwtKey":"test","jwtIssuer":"test","jwtAudience":"test"}'

setup_post_result=$(test_endpoint "$BASE_URL/api/setup/initialize" "POST" "$test_payload")
setup_post_code=$(echo "$setup_post_result" | cut -d'|' -f1)
setup_post_body=$(echo "$setup_post_result" | cut -d'|' -f2-)

if [[ "$setup_post_code" == "200" ]] || [[ "$setup_post_code" == "403" ]] || [[ "$setup_post_code" == "400" ]]; then
    print_success "Setup API (POST) –æ—Ç–≤–µ—á–∞–µ—Ç"
    
    if echo "$setup_post_body" | jq . >/dev/null 2>&1; then
        message=$(echo "$setup_post_body" | jq -r '.message // "N/A"')
        echo "   –°–æ–æ–±—â–µ–Ω–∏–µ: $message"
    else
        echo "   –û—Ç–≤–µ—Ç: ${setup_post_body:0:100}..."
    fi
elif [[ "$setup_post_code" == "405" ]]; then
    print_error "Setup API (POST) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - 405 Method Not Allowed"
    
    if [[ "$setup_post_body" == *"<html>"* ]]; then
        print_error "üö® –ü–æ–ª—É—á–µ–Ω HTML –≤–º–µ—Å—Ç–æ JSON - nginx –±–ª–æ–∫–∏—Ä—É–µ—Ç POST –∑–∞–ø—Ä–æ—Å—ã!"
        print_warning "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
        print_warning "- nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        print_warning "- –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç proxy_method \$request_method"
        print_warning "- nginx –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    fi
else
    print_error "Setup API (POST) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $setup_post_code)"
    if [[ $VERBOSE == true ]]; then
        echo "   –û—Ç–≤–µ—Ç: ${setup_post_body:0:200}..."
    fi
fi

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
print_section "üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

config_files=("nginx/nginx_prod.conf" "docker-compose.yml" "RareBooksService.WebApi/appsettings.json")

for file in "${config_files[@]}"; do
    if [[ -f "$file" ]]; then
        print_success "$file - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è nginx_prod.conf
        if [[ "$file" == "nginx/nginx_prod.conf" ]]; then
            if grep -q "proxy_method \$request_method" "$file"; then
                print_success "   proxy_method –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            else
                print_error "   proxy_method –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!"
                print_warning "   –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤"
            fi
        fi
    else
        print_error "$file - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
done

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
print_section "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx..."
if pgrep nginx >/dev/null; then
    print_success "nginx –∑–∞–ø—É—â–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx
    if command -v nginx &> /dev/null; then
        if nginx -t 2>/dev/null; then
            print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è nginx –≤–∞–ª–∏–¥–Ω–∞"
        else
            print_error "–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx"
            print_warning "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: nginx -t –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
        fi
    fi
else
    print_error "nginx –Ω–µ –∑–∞–ø—É—â–µ–Ω"
fi

# 7. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
if [[ "$FORCE_SETUP_MODE" == true ]]; then
    print_section "üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ setup..."
    appsettings_path="RareBooksService.WebApi/appsettings.json"
    if [[ -f "$appsettings_path" ]]; then
        cp "$appsettings_path" "${appsettings_path}.backup.$(date +%Y%m%d_%H%M%S)"
        rm "$appsettings_path"
        print_success "appsettings.json –≤—Ä–µ–º–µ–Ω–Ω–æ —É–¥–∞–ª–µ–Ω (—Å–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è)"
    else
        print_info "appsettings.json —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
fi

if [[ "$RESTART_SERVICES" == true ]]; then
    print_section "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    if command -v docker-compose &> /dev/null; then
        print_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ nginx –∏ backend..."
        if docker-compose restart nginx backend; then
            print_success "–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
            
            print_info "–û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏..."
            sleep 10
            
            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ç–µ—Å—Ç
            print_info "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞..."
            retest_result=$(test_endpoint "$BASE_URL/api/test/setup-status")
            retest_code=$(echo "$retest_result" | cut -d'|' -f1)
            
            if [[ "$retest_code" == "200" ]]; then
                print_success "–°–µ—Ä–≤–∏—Å—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            else
                print_error "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞ (HTTP $retest_code)"
            fi
        else
            print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤"
        fi
    else
        print_error "docker-compose –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
fi

# 8. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
print_section "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º:"

if [[ "$http_code" == "200" ]] && [[ "$setup_get_code" == "200" ]] && [[ "$setup_post_code" == "405" ]]; then
    print_warning "1. –ü—Ä–æ–±–ª–µ–º–∞ —Å POST –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ /api/setup/initialize"
    echo "   –†–µ—à–µ–Ω–∏–µ: –û–±–Ω–æ–≤–∏—Ç–µ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ"
    echo "   –ö–æ–º–∞–Ω–¥—ã:"
    echo "     sudo docker-compose restart nginx"
    echo "     –∏–ª–∏"
    echo "     sudo nginx -s reload"
fi

if [[ "$http_code" != "200" ]]; then
    print_warning "1. –ü—Ä–æ–±–ª–µ–º–∞ —Å backend —Å–µ—Ä–≤–µ—Ä–æ–º"
    echo "   –†–µ—à–µ–Ω–∏–µ: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "   –ö–æ–º–∞–Ω–¥–∞: sudo docker-compose restart backend"
fi

print_section "üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
echo "   $0 --restart-services           # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
echo "   $0 --force-setup-mode           # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º setup"
echo "   $0 --verbose                    # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
echo "   sudo docker-compose logs nginx  # –õ–æ–≥–∏ nginx"
echo "   sudo docker-compose logs backend # –õ–æ–≥–∏ backend"
echo "   sudo nginx -t                   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx"
echo "   sudo nginx -s reload            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ nginx"

print_section "üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"

# –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
if [[ "$setup_post_code" == "405" ]]; then
    echo ""
    print_error "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: nginx –±–ª–æ–∫–∏—Ä—É–µ—Ç POST –∑–∞–ø—Ä–æ—Å—ã"
    print_warning "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å nginx"
    exit 1
elif [[ "$http_code" == "200" ]] && [[ "$setup_get_code" =~ ^(200|403)$ ]]; then
    echo ""
    print_success "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    exit 0
else
    echo ""
    print_warning "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è"
    exit 2
fi
