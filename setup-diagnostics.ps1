#!/usr/bin/env pwsh

# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å Initial Setup
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./setup-diagnostics.ps1

param(
    [switch]$RestartServices = $false,
    [switch]$ForceSetupMode = $false,
    [string]$BaseUrl = "http://localhost"
)

Write-Host "üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RareBooksService" -ForegroundColor Green
Write-Host "=" * 60

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP endpoint
function Test-Endpoint {
    param(
        [string]$Url,
        [string]$Method = "GET",
        [object]$Body = $null
    )
    
    try {
        $headers = @{ 'Content-Type' = 'application/json' }
        $params = @{
            Uri = $Url
            Method = $Method
            Headers = $headers
            UseBasicParsing = $true
            TimeoutSec = 30
        }
        
        if ($Body) {
            $params.Body = ($Body | ConvertTo-Json)
        }
        
        $response = Invoke-WebRequest @params
        return @{
            Success = $true
            StatusCode = $response.StatusCode
            Content = $response.Content
            Error = $null
        }
    } catch {
        return @{
            Success = $false
            StatusCode = $_.Exception.Response.StatusCode.value__
            Content = $_.Exception.Message
            Error = $_.Exception
        }
    }
}

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
Write-Host "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..." -ForegroundColor Yellow
try {
    $containers = docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    Write-Host $containers
} catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# 2. –¢–µ—Å—Ç endpoint'–∞ /api/test/setup-status
Write-Host "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Test API..." -ForegroundColor Yellow
$testResult = Test-Endpoint -Url "$BaseUrl/api/test/setup-status"

if ($testResult.Success) {
    Write-Host "‚úÖ Test API —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
    $testData = $testResult.Content | ConvertFrom-Json
    Write-Host "   –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: $($testData.timestamp)"
    Write-Host "   –¢—Ä–µ–±—É–µ—Ç—Å—è setup: $($testData.isSetupNeeded)"
    
    if ($testData.isSetupNeeded) {
        Write-Host "‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏" -ForegroundColor Orange
    } else {
        Write-Host "‚ÑπÔ∏è  –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞" -ForegroundColor Blue
    }
} else {
    Write-Host "‚ùå Test API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
    Write-Host "   –°—Ç–∞—Ç—É—Å: $($testResult.StatusCode)"
    Write-Host "   –û—à–∏–±–∫–∞: $($testResult.Content)"
}

Write-Host ""

# 3. –¢–µ—Å—Ç endpoint'–∞ /api/setup (GET)
Write-Host "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Setup API (GET)..." -ForegroundColor Yellow
$setupGetResult = Test-Endpoint -Url "$BaseUrl/api/setup"

if ($setupGetResult.Success) {
    Write-Host "‚úÖ Setup API (GET) —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
    if ($setupGetResult.Content -like "*<html>*") {
        Write-Host "   –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏" -ForegroundColor Green
    } else {
        Write-Host "   –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –æ—Ç–≤–µ—Ç (—Å–∏—Å—Ç–µ–º–∞ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)" -ForegroundColor Blue
    }
} else {
    Write-Host "‚ùå Setup API (GET) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
    Write-Host "   –°—Ç–∞—Ç—É—Å: $($setupGetResult.StatusCode)"
    Write-Host "   –û—à–∏–±–∫–∞: $($setupGetResult.Content)"
}

Write-Host ""

# 4. –¢–µ—Å—Ç endpoint'–∞ /api/setup/initialize (POST)
Write-Host "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Setup API (POST)..." -ForegroundColor Yellow
$testPayload = @{
    adminEmail = "test@example.com"
    adminPassword = "testpass123"
    booksConnectionString = "test"
    usersConnectionString = "test"
    jwtKey = "test"
    jwtIssuer = "test"
    jwtAudience = "test"
}

$setupPostResult = Test-Endpoint -Url "$BaseUrl/api/setup/initialize" -Method "POST" -Body $testPayload

if ($setupPostResult.Success) {
    Write-Host "‚úÖ Setup API (POST) –æ—Ç–≤–µ—á–∞–µ—Ç" -ForegroundColor Green
    try {
        $responseData = $setupPostResult.Content | ConvertFrom-Json
        Write-Host "   –°–æ–æ–±—â–µ–Ω–∏–µ: $($responseData.message)"
    } catch {
        Write-Host "   –û—Ç–≤–µ—Ç: $($setupPostResult.Content.Substring(0, [Math]::Min(100, $setupPostResult.Content.Length)))"
    }
} else {
    Write-Host "‚ùå Setup API (POST) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
    Write-Host "   –°—Ç–∞—Ç—É—Å: $($setupPostResult.StatusCode)"
    
    if ($setupPostResult.Content -like "*<html>*") {
        Write-Host "   üö® –ü–æ–ª—É—á–µ–Ω HTML –≤–º–µ—Å—Ç–æ JSON - —ç—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å nginx –∏–ª–∏ middleware" -ForegroundColor Red
        Write-Host "      –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:" -ForegroundColor Yellow
        Write-Host "      - nginx –±–ª–æ–∫–∏—Ä—É–µ—Ç POST –∑–∞–ø—Ä–æ—Å—ã" -ForegroundColor Yellow
        Write-Host "      - middleware –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø—Ä–æ—Å" -ForegroundColor Yellow
        Write-Host "      - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è docker-compose" -ForegroundColor Yellow
    } else {
        Write-Host "   –û—à–∏–±–∫–∞: $($setupPostResult.Content)"
    }
}

Write-Host ""

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
Write-Host "üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..." -ForegroundColor Yellow

$configFiles = @(
    "nginx/nginx_dev.conf",
    "nginx/nginx_prod.conf", 
    "docker-compose.yml",
    "RareBooksService.WebApi/appsettings.json"
)

foreach ($file in $configFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" -ForegroundColor Red
    }
}

Write-Host ""

# 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
Write-Host "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º:" -ForegroundColor Cyan

if ($testResult.Success -and $setupGetResult.Success -and !$setupPostResult.Success) {
    Write-Host "1. –ü—Ä–æ–±–ª–µ–º–∞ —Å POST –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ /api/setup/initialize" -ForegroundColor Yellow
    Write-Host "   –†–µ—à–µ–Ω–∏–µ: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ nginx –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é" -ForegroundColor White
    Write-Host "   –ö–æ–º–∞–Ω–¥–∞: docker-compose restart nginx" -ForegroundColor Gray
}

if (!$testResult.Success) {
    Write-Host "1. –ü—Ä–æ–±–ª–µ–º–∞ —Å backend —Å–µ—Ä–≤–µ—Ä–æ–º" -ForegroundColor Yellow
    Write-Host "   –†–µ—à–µ–Ω–∏–µ: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä" -ForegroundColor White
    Write-Host "   –ö–æ–º–∞–Ω–¥–∞: docker-compose restart backend" -ForegroundColor Gray
}

if ($ForceSetupMode) {
    Write-Host "üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ setup..." -ForegroundColor Yellow
    Write-Host "   –£–¥–∞–ª—è–µ–º appsettings.json —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ —Å—á–∏—Ç–∞–ª–∞ —Å–µ–±—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π..."
    $appsettingsPath = "RareBooksService.WebApi/appsettings.json"
    if (Test-Path $appsettingsPath) {
        Remove-Item $appsettingsPath -Backup
        Write-Host "‚úÖ appsettings.json –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω" -ForegroundColor Green
    }
}

if ($RestartServices) {
    Write-Host "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..." -ForegroundColor Yellow
    try {
        docker-compose restart nginx backend
        Write-Host "‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã" -ForegroundColor Green
        Start-Sleep -Seconds 5
        Write-Host "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥..."
        
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ç–µ—Å—Ç
        $retestResult = Test-Endpoint -Url "$BaseUrl/api/test/setup-status"
        if ($retestResult.Success) {
            Write-Host "‚úÖ –°–µ—Ä–≤–∏—Å—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" -ForegroundColor Green
        } else {
            Write-Host "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: $($_.Exception.Message)" -ForegroundColor Red
    }
}

Write-Host ""
Write-Host "üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:" -ForegroundColor Cyan
Write-Host "   ./setup-diagnostics.ps1 -RestartServices    # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
Write-Host "   ./setup-diagnostics.ps1 -ForceSetupMode     # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º setup"
Write-Host "   docker-compose logs nginx                   # –õ–æ–≥–∏ nginx"
Write-Host "   docker-compose logs backend                 # –õ–æ–≥–∏ backend"

Write-Host ""
Write-Host "üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" -ForegroundColor Green
