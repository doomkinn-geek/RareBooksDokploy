#!/bin/bash

echo "üîí –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HTTPS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx"
echo "========================================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–∞–ø–∞
if [ ! -f "docker-compose.yml.backup" ]; then
    echo "‚ùå –ë—ç–∫–∞–ø docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é..."
    
    sed -i.tmp 's|./nginx/nginx_prod_http.conf:/etc/nginx/nginx.conf|./nginx/nginx_prod.conf:/etc/nginx/nginx.conf|g' docker-compose.yml
    
    if grep -q "nginx_prod.conf" docker-compose.yml; then
        echo "‚úÖ docker-compose.yml –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é"
    else
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å docker-compose.yml"
        exit 1
    fi
else
    echo "üìã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞..."
    cp docker-compose.yml.backup docker-compose.yml
    echo "‚úÖ docker-compose.yml –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –±—ç–∫–∞–ø–∞"
fi

echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
if sudo ls /etc/letsencrypt/live/rare-books.ru/ 2>/dev/null | grep -q "fullchain.pem"; then
    echo "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã"
else
    echo "‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ /etc/letsencrypt/live/rare-books.ru/"
    echo "–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
fi

echo ""
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ nginx..."
sudo docker-compose stop nginx

echo ""
echo "üöÄ –ó–∞–ø—É—Å–∫ nginx —Å HTTPS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π..."
sudo docker-compose up -d nginx

echo ""
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (15 —Å–µ–∫—É–Ω–¥)..."
sleep 15

echo ""
echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
sudo docker-compose ps | grep nginx

echo ""
echo "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTPS endpoints..."

echo "–¢–µ—Å—Ç 1: HTTPS Test API"
https_test=$(curl -k -s -w "%{http_code}" -o /dev/null https://rare-books.ru/api/test/setup-status 2>/dev/null)
if [ "$https_test" = "200" ]; then
    echo "‚úÖ HTTPS Test API —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥: $https_test)"
else
    echo "‚ùå HTTPS Test API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥: $https_test)"
fi

echo "–¢–µ—Å—Ç 2: HTTPS Setup API (POST)"
https_setup=$(curl -k -s -w "%{http_code}" -o /tmp/https_test.json \
    -X POST https://rare-books.ru/api/setup/initialize \
    -H "Content-Type: application/json" \
    -d '{"test":"data"}' 2>/dev/null)

echo "–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: $https_setup"
if [ -f "/tmp/https_test.json" ]; then
    if grep -q "<html>" /tmp/https_test.json; then
        echo "‚ùå –ü–æ–ª—É—á–µ–Ω HTML –≤–º–µ—Å—Ç–æ JSON"
    elif grep -q '"' /tmp/https_test.json; then
        echo "‚úÖ –ü–æ–ª—É—á–µ–Ω JSON –æ—Ç–≤–µ—Ç"
    fi
    rm -f /tmp/https_test.json
fi

echo "–¢–µ—Å—Ç 3: HTTP -> HTTPS —Ä–µ–¥–∏—Ä–µ–∫—Ç"
redirect_test=$(curl -s -w "%{http_code}" -o /dev/null http://rare-books.ru/api/test/setup-status 2>/dev/null)
if [ "$redirect_test" = "301" ]; then
    echo "‚úÖ HTTP –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç –Ω–∞ HTTPS (–∫–æ–¥: $redirect_test)"
else
    echo "‚ö†Ô∏è HTTP —Ä–µ–¥–∏—Ä–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ (–∫–æ–¥: $redirect_test)"
fi

echo ""
echo "üìã –õ–æ–≥–∏ nginx (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫):"
sudo docker-compose logs --tail=10 nginx

echo ""
if [ "$https_test" = "200" ] && [ "$https_setup" != "405" ]; then
    echo "‚úÖ HTTPS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    echo ""
    echo "üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ:"
    echo "   - –î–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑: https://rare-books.ru/"
    echo "   - Setup API: https://rare-books.ru/api/setup"
    echo ""
    echo "–ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
    echo "   rm docker-compose.yml.backup"
    echo "   rm nginx/nginx_prod_http.conf"
else
    echo "‚ùå HTTPS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏"
    echo ""
    echo "üîß –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:"
    echo "   sudo docker-compose logs nginx"
    echo "   sudo nginx -t  # –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    echo ""
    echo "–ò–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ HTTP –≤–µ—Ä—Å–∏–∏:"
    echo "   ./quick-fix-http.sh"
fi
