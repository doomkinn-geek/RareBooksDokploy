using System;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace TelegramBotTest
{
    public static class TelegramTestMethods
    {
        private static readonly string BOT_TOKEN = "7745135732:AAFp2cJs8boBZZDyb1myO1kcmjwk6K3Mi7U";
        private static readonly string BASE_URL = $"https://api.telegram.org/bot{BOT_TOKEN}";
        private static readonly HttpClient _httpClient = new HttpClient();

        public static async Task TestBotConnection()
        {
            Console.WriteLine("--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É ---");
            
            var response = await _httpClient.GetAsync($"{BASE_URL}/getMe");
            var content = await response.Content.ReadAsStringAsync();
            
            Console.WriteLine($"Status Code: {response.StatusCode}");
            Console.WriteLine($"Response: {content}");
            
            if (response.IsSuccessStatusCode)
            {
                var result = JsonDocument.Parse(content);
                if (result.RootElement.GetProperty("ok").GetBoolean())
                {
                    var botInfo = result.RootElement.GetProperty("result");
                    Console.WriteLine($"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!");
                    Console.WriteLine($"ID: {botInfo.GetProperty("id").GetInt64()}");
                    Console.WriteLine($"–ò–º—è: {botInfo.GetProperty("first_name").GetString()}");
                    Console.WriteLine($"Username: @{botInfo.GetProperty("username").GetString()}");
                }
                else
                {
                    Console.WriteLine("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API");
                }
            }
            else
            {
                Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É");
            }
        }

        public static async Task SendTestMessage()
        {
            Console.WriteLine("--- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---");
            Console.Write("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ (–∏–ª–∏ –≤–∞—à Telegram ID): ");
            var chatId = Console.ReadLine();

            if (string.IsNullOrWhiteSpace(chatId))
            {
                Console.WriteLine("‚ùå ID —á–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
                return;
            }

            var message = new
            {
                chat_id = chatId,
                text = $"ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞\n–í—Ä–µ–º—è: {DateTime.Now:yyyy-MM-dd HH:mm:ss}",
                parse_mode = "Markdown"
            };

            var json = JsonSerializer.Serialize(message);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await _httpClient.PostAsync($"{BASE_URL}/sendMessage", content);
            var responseContent = await response.Content.ReadAsStringAsync();

            Console.WriteLine($"Status Code: {response.StatusCode}");
            Console.WriteLine($"Response: {responseContent}");

            if (response.IsSuccessStatusCode)
            {
                var result = JsonDocument.Parse(responseContent);
                if (result.RootElement.GetProperty("ok").GetBoolean())
                {
                    Console.WriteLine("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
                }
                else
                {
                    Console.WriteLine("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
                }
            }
            else
            {
                Console.WriteLine("‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ");
            }
        }

        public static async Task TestKeyboard()
        {
            Console.WriteLine("--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---");
            Console.Write("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞: ");
            var chatId = Console.ReadLine();

            if (string.IsNullOrWhiteSpace(chatId))
            {
                Console.WriteLine("‚ùå ID —á–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
                return;
            }

            var inlineKeyboard = new
            {
                chat_id = chatId,
                text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup = new
                {
                    inline_keyboard = new[]
                    {
                        new[]
                        {
                            new { text = "üìù –°–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data = "create_notification" },
                            new { text = "üìã –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data = "list_notifications" }
                        },
                        new[]
                        {
                            new { text = "‚ùì –ü–æ–º–æ—â—å", callback_data = "help" }
                        }
                    }
                }
            };

            var json = JsonSerializer.Serialize(inlineKeyboard);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await _httpClient.PostAsync($"{BASE_URL}/sendMessage", content);
            var responseContent = await response.Content.ReadAsStringAsync();

            Console.WriteLine($"Status Code: {response.StatusCode}");
            Console.WriteLine($"Response: {responseContent}");

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
                Console.WriteLine("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ Telegram");
            }
        }

        public static async Task SimulateWebhookUpdate()
        {
            Console.WriteLine("--- –°–∏–º—É–ª—è—Ü–∏—è webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---");

            // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            var updates = new[]
            {
                // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                CreateTextMessageUpdate("123456789", "TestUser", "/start"),
                
                // Callback query (–Ω–∞–∂–∞—Ç–∏–µ inline –∫–Ω–æ–ø–∫–∏)
                CreateCallbackQueryUpdate("123456789", "TestUser", "create_notification"),
                
                // –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
                CreateTextMessageUpdate("123456789", "TestUser", "–ø—É—à–∫–∏–Ω, –ø–æ—ç–∑–∏—è")
            };

            Console.WriteLine("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏:");
            Console.WriteLine("1. –ö–æ–º–∞–Ω–¥–∞ /start");
            Console.WriteLine("2. –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É'");
            Console.WriteLine("3. –í–≤–æ–¥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤");
            Console.Write("–í—ã–±–µ—Ä–∏—Ç–µ (1-3): ");
            
            var choice = Console.ReadLine();
            if (!int.TryParse(choice, out int index) || index < 1 || index > 3)
            {
                Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä");
                return;
            }

            var selectedUpdate = updates[index - 1];
            var json = JsonSerializer.Serialize(selectedUpdate, new JsonSerializerOptions 
            { 
                WriteIndented = true,
                PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower
            });

            Console.WriteLine("\n--- –°–∏–º—É–ª–∏—Ä—É–µ–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ---");
            Console.WriteLine(json);
            Console.WriteLine("\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---");

            // –ó–¥–µ—Å—å –±—ã –º—ã –≤—ã–∑–≤–∞–ª–∏ –Ω–∞—à TelegramBotService
            await ProcessUpdateSimulation(selectedUpdate);
        }

        private static object CreateTextMessageUpdate(string userId, string username, string text)
        {
            return new
            {
                update_id = Random.Shared.Next(1000000),
                message = new
                {
                    message_id = Random.Shared.Next(1000),
                    from = new
                    {
                        id = long.Parse(userId),
                        is_bot = false,
                        first_name = "Test",
                        username = username
                    },
                    chat = new
                    {
                        id = long.Parse(userId),
                        type = "private"
                    },
                    date = DateTimeOffset.UtcNow.ToUnixTimeSeconds(),
                    text = text
                }
            };
        }

        private static object CreateCallbackQueryUpdate(string userId, string username, string callbackData)
        {
            return new
            {
                update_id = Random.Shared.Next(1000000),
                callback_query = new
                {
                    id = Guid.NewGuid().ToString(),
                    from = new
                    {
                        id = long.Parse(userId),
                        is_bot = false,
                        first_name = "Test",
                        username = username
                    },
                    message = new
                    {
                        message_id = Random.Shared.Next(1000),
                        chat = new
                        {
                            id = long.Parse(userId),
                            type = "private"
                        }
                    },
                    data = callbackData
                }
            };
        }

        private static async Task ProcessUpdateSimulation(object update)
        {
            // –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            var json = JsonSerializer.Serialize(update);
            var updateObj = JsonDocument.Parse(json);

            if (updateObj.RootElement.TryGetProperty("message", out var messageProperty))
            {
                var text = messageProperty.GetProperty("text").GetString();
                var userId = messageProperty.GetProperty("from").GetProperty("id").GetInt64().ToString();
                
                Console.WriteLine($"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}");
                
                if (text == "/start")
                {
                    Console.WriteLine("üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start");
                    Console.WriteLine("‚û°Ô∏è –î–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
                }
                else if (text?.Contains(",") == true)
                {
                    Console.WriteLine("üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤");
                    Console.WriteLine($"‚û°Ô∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {text}");
                    Console.WriteLine("‚û°Ô∏è –î–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É —Ü–µ–Ω—ã");
                }
            }
            else if (updateObj.RootElement.TryGetProperty("callback_query", out var callbackProperty))
            {
                var data = callbackProperty.GetProperty("data").GetString();
                var userId = callbackProperty.GetProperty("from").GetProperty("id").GetInt64().ToString();
                
                Console.WriteLine($"üîò –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏: '{data}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}");
                
                if (data == "create_notification")
                {
                    Console.WriteLine("üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
                    Console.WriteLine("‚û°Ô∏è –î–æ–ª–∂–Ω—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤");
                }
            }

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await Task.Delay(500);
            Console.WriteLine("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        }
    }
}
