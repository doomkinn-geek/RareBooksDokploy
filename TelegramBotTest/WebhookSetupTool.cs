using System;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace TelegramBotTest
{
    public static class WebhookSetupTool
    {
        private static readonly string BOT_TOKEN = "7745135732:AAFp2cJs8boBZZDyb1myO1kcmjwk6K3Mi7U";
        private static readonly string BASE_URL = $"https://api.telegram.org/bot{BOT_TOKEN}";
        private static readonly HttpClient _httpClient = new HttpClient();

        public static async Task SetupWebhook()
        {
            Console.WriteLine("=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook ===");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
            await CheckCurrentWebhook();
            
            Console.WriteLine("\n–í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:");
            Console.WriteLine("1. –£–¥–∞–ª–∏—Ç—å webhook (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å polling)");
            Console.WriteLine("2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook —Å ngrok");
            Console.WriteLine("3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook —Å –ø—É–±–ª–∏—á–Ω—ã–º URL");
            Console.WriteLine("4. –ù–∞–∑–∞–¥");
            Console.Write("–í—ã–±–µ—Ä–∏—Ç–µ (1-4): ");
            
            var choice = Console.ReadLine();
            
            switch (choice)
            {
                case "1":
                    await DeleteWebhook();
                    break;
                case "2":
                    await SetupNgrokWebhook();
                    break;
                case "3":
                    await SetupPublicWebhook();
                    break;
                case "4":
                    return;
                default:
                    Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
                    break;
            }
        }

        private static async Task CheckCurrentWebhook()
        {
            Console.WriteLine("--- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ webhook ---");
            
            try
            {
                var response = await _httpClient.GetAsync($"{BASE_URL}/getWebhookInfo");
                var content = await response.Content.ReadAsStringAsync();
                
                if (response.IsSuccessStatusCode)
                {
                    var result = JsonDocument.Parse(content);
                    if (result.RootElement.GetProperty("ok").GetBoolean())
                    {
                        var webhookInfo = result.RootElement.GetProperty("result");
                        var url = webhookInfo.GetProperty("url").GetString();
                        var pendingUpdateCount = webhookInfo.GetProperty("pending_update_count").GetInt32();
                        
                        if (string.IsNullOrEmpty(url))
                        {
                            Console.WriteLine("üî¥ Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling)");
                        }
                        else
                        {
                            Console.WriteLine($"üü¢ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {url}");
                            Console.WriteLine($"üì¶ –û–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {pendingUpdateCount}");
                            
                            if (webhookInfo.TryGetProperty("last_error_date", out var lastErrorDate) && lastErrorDate.GetInt64() > 0)
                            {
                                var lastError = webhookInfo.GetProperty("last_error_message").GetString();
                                var errorDateTime = DateTimeOffset.FromUnixTimeSeconds(lastErrorDate.GetInt64());
                                Console.WriteLine($"‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ ({errorDateTime:yyyy-MM-dd HH:mm:ss}): {lastError}");
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook: {ex.Message}");
            }
        }

        private static async Task DeleteWebhook()
        {
            Console.WriteLine("--- –£–¥–∞–ª–µ–Ω–∏–µ webhook ---");
            
            try
            {
                var response = await _httpClient.PostAsync($"{BASE_URL}/deleteWebhook", null);
                var content = await response.Content.ReadAsStringAsync();
                
                if (response.IsSuccessStatusCode)
                {
                    var result = JsonDocument.Parse(content);
                    if (result.RootElement.GetProperty("ok").GetBoolean())
                    {
                        Console.WriteLine("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
                        Console.WriteLine("‚ÑπÔ∏è  –¢–µ–ø–µ—Ä—å –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ polling (getUpdates)");
                        Console.WriteLine("‚ö†Ô∏è  –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç, –Ω—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {ex.Message}");
            }
        }

        private static async Task SetupNgrokWebhook()
        {
            Console.WriteLine("--- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook —Å ngrok ---");
            Console.WriteLine("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:");
            Console.WriteLine("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ngrok: https://ngrok.com/");
            Console.WriteLine("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ RareBooksService.WebApi –Ω–∞ –ø–æ—Ä—Ç—É 5000");
            Console.WriteLine("3. –í –Ω–æ–≤–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ngrok http 5000");
            Console.WriteLine("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ HTTPS URL –∏–∑ ngrok (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://abc123.ngrok.io)");
            Console.WriteLine();
            
            Console.Write("–í–≤–µ–¥–∏—Ç–µ ngrok HTTPS URL (–±–µ–∑ /api/telegram/webhook): ");
            var baseUrl = Console.ReadLine()?.Trim();
            
            if (string.IsNullOrEmpty(baseUrl))
            {
                Console.WriteLine("‚ùå URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
                return;
            }
            
            var webhookUrl = baseUrl.TrimEnd('/') + "/api/telegram/webhook";
            await SetWebhook(webhookUrl);
        }

        private static async Task SetupPublicWebhook()
        {
            Console.WriteLine("--- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook —Å –ø—É–±–ª–∏—á–Ω—ã–º URL ---");
            Console.WriteLine("\n‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à —Å–µ—Ä–≤–µ—Ä:");
            Console.WriteLine("   - –ó–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTPS");
            Console.WriteLine("   - –ò–º–µ–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç");
            Console.WriteLine("   - Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: /api/telegram/webhook");
            Console.WriteLine();
            
            Console.Write("–í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—ã–π URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://yourdomain.com): ");
            var baseUrl = Console.ReadLine()?.Trim();
            
            if (string.IsNullOrEmpty(baseUrl))
            {
                Console.WriteLine("‚ùå URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
                return;
            }
            
            var webhookUrl = baseUrl.TrimEnd('/') + "/api/telegram/webhook";
            await SetWebhook(webhookUrl);
        }

        private static async Task SetWebhook(string webhookUrl)
        {
            Console.WriteLine($"--- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: {webhookUrl} ---");
            
            try
            {
                var payload = new
                {
                    url = webhookUrl,
                    allowed_updates = new[] { "message", "callback_query" }
                };
                
                var json = JsonSerializer.Serialize(payload);
                var content = new StringContent(json, Encoding.UTF8, "application/json");
                
                var response = await _httpClient.PostAsync($"{BASE_URL}/setWebhook", content);
                var responseContent = await response.Content.ReadAsStringAsync();
                
                Console.WriteLine($"Status Code: {response.StatusCode}");
                Console.WriteLine($"Response: {responseContent}");
                
                if (response.IsSuccessStatusCode)
                {
                    var result = JsonDocument.Parse(responseContent);
                    if (result.RootElement.GetProperty("ok").GetBoolean())
                    {
                        Console.WriteLine("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
                        Console.WriteLine("\nüéØ –ß—Ç–æ —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞—Ç—å:");
                        Console.WriteLine("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ RareBooksService.WebApi –∑–∞–ø—É—â–µ–Ω");
                        Console.WriteLine("2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start");
                        Console.WriteLine("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤");
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
                        Console.WriteLine("\n‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —É—Å—Ç–∞–Ω–æ–≤–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...");
                        await Task.Delay(3000);
                        await CheckCurrentWebhook();
                    }
                    else
                    {
                        Console.WriteLine("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook");
                        if (result.RootElement.TryGetProperty("description", out var description))
                        {
                            Console.WriteLine($"–û–ø–∏—Å–∞–Ω–∏–µ: {description.GetString()}");
                        }
                    }
                }
                else
                {
                    Console.WriteLine("‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {ex.Message}");
            }
        }

        public static async Task TestWebhookConnection()
        {
            Console.WriteLine("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ===");
            Console.Write("–í–≤–µ–¥–∏—Ç–µ URL –≤–∞—à–µ–≥–æ webhook endpoint: ");
            var webhookUrl = Console.ReadLine()?.Trim();
            
            if (string.IsNullOrEmpty(webhookUrl))
            {
                Console.WriteLine("‚ùå URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
                return;
            }
            
            try
            {
                // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                var testUpdate = new
                {
                    update_id = 123456789,
                    message = new
                    {
                        message_id = 1,
                        from = new
                        {
                            id = 494443219,
                            is_bot = false,
                            first_name = "Test",
                            username = "testuser"
                        },
                        chat = new
                        {
                            id = 494443219,
                            type = "private"
                        },
                        date = DateTimeOffset.UtcNow.ToUnixTimeSeconds(),
                        text = "/start"
                    }
                };
                
                var json = JsonSerializer.Serialize(testUpdate);
                var content = new StringContent(json, Encoding.UTF8, "application/json");
                
                Console.WriteLine($"–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞: {webhookUrl}");
                
                var response = await _httpClient.PostAsync(webhookUrl, content);
                var responseContent = await response.Content.ReadAsStringAsync();
                
                Console.WriteLine($"Status Code: {response.StatusCode}");
                Console.WriteLine($"Response: {responseContent}");
                
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("‚úÖ Webhook endpoint –æ—Ç–≤–µ—á–∞–µ—Ç!");
                }
                else
                {
                    Console.WriteLine("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å webhook endpoint");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {ex.Message}");
            }
        }
    }
}
