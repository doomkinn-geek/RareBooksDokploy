events {
    worker_connections 1024;
}

http {
    # --- можно оставить upstream'ы, как есть ---
    upstream backend {
        server backend:80;
    }
    upstream frontend {
        server frontend:80;
    }

    # ---------------------------
    # 1) Секция server (HTTP) - для Setup API и диагностики
    # ---------------------------
    server {
        listen 80;
        server_name rare-books.ru;
        
        # Специальные API endpoints доступны через HTTP (НЕ редиректим!)
        location ~ ^/api/(setup|test|setupcheck)/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
            proxy_request_buffering off;
            
            # КРИТИЧЕСКИ ВАЖНО для POST запросов
            proxy_method $request_method;
            
            # Для setup API увеличиваем лимиты
            client_max_body_size 10M;
            proxy_connect_timeout 120s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
        }
        
        # Все остальное редиректим на HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # ---------------------------
    # 2) Секция server (HTTPS)
    # ---------------------------
    server {
        listen 443 ssl;
        server_name rare-books.ru;

        # Файлы сертификатов внутри контейнера
        #ssl_certificate     /etc/ssl/rare-books.ru/rare-books.ru.crt;
        #ssl_certificate_key /etc/ssl/rare-books.ru/rare-books.ru.key;
		
		ssl_certificate     /etc/letsencrypt/live/rare-books.ru/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/rare-books.ru/privkey.pem;

        
        # Дополнительно, если у вас есть корневой сертификат отдельно:
        # ssl_stapling on;
        # ssl_trusted_certificate /etc/ssl/rare-books.ru/ca.crt;
        # resolver 8.8.8.8;

        # (Дополнительные настройки, как в инструкции — можно добавить ssl_session_cache, ssl_protocols и т.п.)

        # Специальная локация для setup API с расширенными правами
        location /api/setup/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_buffering off;
            proxy_request_buffering off;
            
            # Разрешаем все HTTP методы (КРИТИЧЕСКИ ВАЖНО для POST!)
            proxy_method $request_method;
            
            # Увеличиваем размер тела запроса для конфигурации
            client_max_body_size 10M;
            
            # Увеличиваем таймауты для инициализации
            proxy_connect_timeout 120s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
        }

        # Специальная локация для test и setupcheck API
        location ~ ^/api/(test|setupcheck)/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
            proxy_request_buffering off;
            
            # Разрешаем все HTTP методы для тестирования
            proxy_method $request_method;
        }

        # Специальная локация для Telegram webhook API
        location /api/telegram/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection keep-alive;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Отключаем буферизацию для real-time обработки webhook
            proxy_buffering off;
            proxy_request_buffering off;
            
            # Специальные настройки для Telegram webhook
            client_max_body_size 1M;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Логирование для отладки
            access_log /var/log/nginx/telegram_access.log;
            error_log /var/log/nginx/telegram_error.log debug;
        }

        # Специальная локация для Telegram диагностики API
        location /api/TelegramDiagnostics/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
            proxy_request_buffering off;
            
            # Увеличенные таймауты для диагностики
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Общая локация для остальных API
        location /api/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection keep-alive;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_buffering off;
            proxy_request_buffering off;
            
            # Разрешаем все HTTP методы
            proxy_method $request_method;
            
            # Увеличиваем таймауты
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Проксирование всего остального -> frontend
        location / {
            proxy_pass http://frontend;
        }
		
		location /.well-known/acme-challenge/ {
			root /var/www/certbot;
		}
    }
}
