using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using RareBooksService.Common.Models;
using RareBooksService.Common.Models.Telegram;
using RareBooksService.Data;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;

namespace RareBooksService.WebApi.Services
{
    /// <summary>
    /// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ TelegramBotService —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    /// </summary>
    public partial class TelegramBotService
    {
        // –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫

        private async Task StartCreateNotificationAsync(string chatId, string telegramId, CancellationToken cancellationToken)
        {
            var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
            if (user == null)
            {
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", 
                    cancellationToken);
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            var newPreference = new
            {
                keywords = "",
                minPrice = 0,
                maxPrice = 0,
                minYear = 0,
                maxYear = 0,
                cities = "",
                categoryIds = "",
                frequency = 60
            };

            await _telegramService.SetUserStateAsync(telegramId, TelegramBotStates.CreatingNotification, 
                JsonSerializer.Serialize(newPreference), cancellationToken);

            var message = new StringBuilder();
            message.AppendLine("üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>");
            message.AppendLine();
            message.AppendLine("–ü–æ—à–∞–≥–æ–≤–æ –Ω–∞—Å—Ç—Ä–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∫–Ω–∏–≥:");
            message.AppendLine();
            message.AppendLine("üìö <b>–®–∞–≥ 1: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</b>");
            message.AppendLine("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:");
            message.AppendLine();
            message.AppendLine("<i>–ü—Ä–∏–º–µ—Ä—ã:</i>");
            message.AppendLine("‚Ä¢ –ü—É—à–∫–∏–Ω, –ø—Ä–∏–∂–∏–∑–Ω–µ–Ω–Ω–æ–µ –∏–∑–¥–∞–Ω–∏–µ");
            message.AppendLine("‚Ä¢ –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π, –ø–µ—Ä–≤–æ–µ –∏–∑–¥–∞–Ω–∏–µ");
            message.AppendLine("‚Ä¢ –∞–≤—Ç–æ–≥—Ä–∞—Ñ, —Ä–µ–¥–∫–æ—Å—Ç—å");
            message.AppendLine();
            message.AppendLine("–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b> —á—Ç–æ–±—ã –Ω–µ –∑–∞–¥–∞–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.");

            var keyboard = new TelegramInlineKeyboardMarkup();
            keyboard.InlineKeyboard.Add(new List<TelegramInlineKeyboardButton>
            {
                new TelegramInlineKeyboardButton 
                { 
                    Text = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                    CallbackData = TelegramCallbacks.Cancel 
                }
            });

            await _telegramService.SendMessageWithKeyboardAsync(chatId, message.ToString(), keyboard, cancellationToken);
        }

        private async Task ShowEditNotificationMenuAsync(string chatId, string telegramId, int preferenceId, CancellationToken cancellationToken)
        {
            var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
            if (user == null) return;

            using var scope = _scopeFactory.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<UsersDbContext>();

            var preference = await context.UserNotificationPreferences
                .FirstOrDefaultAsync(p => p.Id == preferenceId && p.UserId == user.Id, cancellationToken);

            if (preference == null)
            {
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", 
                    cancellationToken);
                return;
            }

            var message = new StringBuilder();
            message.AppendLine($"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ #{preference.Id}</b>");
            message.AppendLine();

            var status = preference.IsEnabled ? "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞";
            message.AppendLine($"<b>–°—Ç–∞—Ç—É—Å:</b> {status}");
            
            var keywords = string.IsNullOrEmpty(preference.Keywords) ? "–ù–µ –∑–∞–¥–∞–Ω—ã" : preference.Keywords;
            message.AppendLine($"<b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {keywords}");
            
            if (preference.MinPrice > 0 || preference.MaxPrice > 0)
            {
                var priceRange = $"{preference.MinPrice}‚ÇΩ - {preference.MaxPrice}‚ÇΩ";
                if (preference.MinPrice == 0) priceRange = $"–¥–æ {preference.MaxPrice}‚ÇΩ";
                if (preference.MaxPrice == 0) priceRange = $"–æ—Ç {preference.MinPrice}‚ÇΩ";
                message.AppendLine($"<b>–¶–µ–Ω–∞:</b> {priceRange}");
            }
            
            if (preference.MinYear > 0 || preference.MaxYear > 0)
            {
                var yearRange = $"{preference.MinYear} - {preference.MaxYear}";
                if (preference.MinYear == 0) yearRange = $"–¥–æ {preference.MaxYear}";
                if (preference.MaxYear == 0) yearRange = $"–æ—Ç {preference.MinYear}";
                message.AppendLine($"<b>–ì–æ–¥—ã –∏–∑–¥–∞–Ω–∏—è:</b> {yearRange}");
            }

            if (!string.IsNullOrEmpty(preference.Cities))
            {
                message.AppendLine($"<b>–ì–æ—Ä–æ–¥–∞:</b> {preference.Cities}");
            }

            message.AppendLine($"<b>–ß–∞—Å—Ç–æ—Ç–∞:</b> {preference.NotificationFrequencyMinutes} –º–∏–Ω");

            if (preference.LastNotificationSent.HasValue)
            {
                message.AppendLine($"<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b> {preference.LastNotificationSent.Value:dd.MM.yyyy HH:mm}");
            }

            var keyboard = CreateEditNotificationKeyboard(preference);
            await _telegramService.SendMessageWithKeyboardAsync(chatId, message.ToString(), keyboard, cancellationToken);
        }

        private async Task ShowDeleteConfirmationAsync(string chatId, string telegramId, int preferenceId, CancellationToken cancellationToken)
        {
            var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
            if (user == null) return;

            using var scope = _scopeFactory.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<UsersDbContext>();

            var preference = await context.UserNotificationPreferences
                .FirstOrDefaultAsync(p => p.Id == preferenceId && p.UserId == user.Id, cancellationToken);

            if (preference == null)
            {
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", 
                    cancellationToken);
                return;
            }

            var keywords = string.IsNullOrEmpty(preference.Keywords) ? "–ë–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤" : preference.Keywords;
            var message = $"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n" +
                         $"<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b> {keywords}\n" +
                         $"<b>–ß–∞—Å—Ç–æ—Ç–∞:</b> {preference.NotificationFrequencyMinutes} –º–∏–Ω\n\n" +
                         $"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –Ω–∞—Å—Ç—Ä–æ–π–∫—É?";

            var keyboard = new TelegramInlineKeyboardMarkup();
            keyboard.InlineKeyboard.Add(new List<TelegramInlineKeyboardButton>
            {
                new TelegramInlineKeyboardButton 
                { 
                    Text = "üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", 
                    CallbackData = TelegramCallbacks.ConfirmDelete + preferenceId 
                },
                new TelegramInlineKeyboardButton 
                { 
                    Text = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                    CallbackData = TelegramCallbacks.CancelDelete 
                }
            });

            await _telegramService.SendMessageWithKeyboardAsync(chatId, message, keyboard, cancellationToken);
        }

        private async Task DeleteNotificationAsync(string chatId, string telegramId, int preferenceId, CancellationToken cancellationToken)
        {
            var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
            if (user == null) return;

            using var scope = _scopeFactory.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<UsersDbContext>();

            var preference = await context.UserNotificationPreferences
                .FirstOrDefaultAsync(p => p.Id == preferenceId && p.UserId == user.Id, cancellationToken);

            if (preference == null)
            {
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", 
                    cancellationToken);
                return;
            }

            context.UserNotificationPreferences.Remove(preference);
            await context.SaveChangesAsync(cancellationToken);

            await _telegramService.SendNotificationAsync(chatId, 
                "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", 
                cancellationToken);
        }

        private async Task ToggleNotificationAsync(string chatId, string telegramId, int preferenceId, CancellationToken cancellationToken)
        {
            var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
            if (user == null) return;

            using var scope = _scopeFactory.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<UsersDbContext>();

            var preference = await context.UserNotificationPreferences
                .FirstOrDefaultAsync(p => p.Id == preferenceId && p.UserId == user.Id, cancellationToken);

            if (preference == null)
            {
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", 
                    cancellationToken);
                return;
            }

            preference.IsEnabled = !preference.IsEnabled;
            preference.UpdatedAt = DateTime.UtcNow;
            await context.SaveChangesAsync(cancellationToken);

            var status = preference.IsEnabled ? "–≤–∫–ª—é—á–µ–Ω–∞" : "–æ—Ç–∫–ª—é—á–µ–Ω–∞";
            await _telegramService.SendNotificationAsync(chatId, 
                $"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ #{preferenceId} {status}!", 
                cancellationToken);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await ShowEditNotificationMenuAsync(chatId, telegramId, preferenceId, cancellationToken);
        }

        private async Task StartEditKeywordsAsync(string chatId, string telegramId, int preferenceId, CancellationToken cancellationToken)
        {
            await _telegramService.SetUserStateAsync(telegramId, TelegramBotStates.EditingKeywords, 
                preferenceId.ToString(), cancellationToken);

            var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
            using var scope = _scopeFactory.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<UsersDbContext>();

            var preference = await context.UserNotificationPreferences
                .FirstOrDefaultAsync(p => p.Id == preferenceId && p.UserId == user.Id, cancellationToken);

            var currentKeywords = string.IsNullOrEmpty(preference?.Keywords) ? "–Ω–µ –∑–∞–¥–∞–Ω—ã" : preference.Keywords;
            
            var message = $"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤</b>\n\n" +
                         $"<b>–¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {currentKeywords}\n\n" +
                         $"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n" +
                         $"<i>–ü—Ä–∏–º–µ—Ä—ã:</i>\n" +
                         $"‚Ä¢ –ü—É—à–∫–∏–Ω, –ø—Ä–∏–∂–∏–∑–Ω–µ–Ω–Ω–æ–µ –∏–∑–¥–∞–Ω–∏–µ\n" +
                         $"‚Ä¢ –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π, –ø–µ—Ä–≤–æ–µ –∏–∑–¥–∞–Ω–∏–µ\n" +
                         $"‚Ä¢ –∞–≤—Ç–æ–≥—Ä–∞—Ñ, —Ä–µ–¥–∫–æ—Å—Ç—å\n\n" +
                         $"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–æ—á–∏—Å—Ç–∏—Ç—å</b> —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.";

            var keyboard = new TelegramInlineKeyboardMarkup();
            keyboard.InlineKeyboard.Add(new List<TelegramInlineKeyboardButton>
            {
                new TelegramInlineKeyboardButton 
                { 
                    Text = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                    CallbackData = TelegramCallbacks.EditNotification + preferenceId 
                }
            });

            await _telegramService.SendMessageWithKeyboardAsync(chatId, message, keyboard, cancellationToken);
        }

        private async Task StartEditPriceAsync(string chatId, string telegramId, int preferenceId, CancellationToken cancellationToken)
        {
            await _telegramService.SetUserStateAsync(telegramId, TelegramBotStates.EditingPrice, 
                preferenceId.ToString(), cancellationToken);

            var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
            using var scope = _scopeFactory.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<UsersDbContext>();

            var preference = await context.UserNotificationPreferences
                .FirstOrDefaultAsync(p => p.Id == preferenceId && p.UserId == user.Id, cancellationToken);

            var currentRange = "–Ω–µ –∑–∞–¥–∞–Ω";
            if (preference != null && (preference.MinPrice > 0 || preference.MaxPrice > 0))
            {
                if (preference.MinPrice > 0 && preference.MaxPrice > 0)
                    currentRange = $"{preference.MinPrice}‚ÇΩ - {preference.MaxPrice}‚ÇΩ";
                else if (preference.MinPrice > 0)
                    currentRange = $"–æ—Ç {preference.MinPrice}‚ÇΩ";
                else if (preference.MaxPrice > 0)
                    currentRange = $"–¥–æ {preference.MaxPrice}‚ÇΩ";
            }
            
            var message = $"üí∞ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞</b>\n\n" +
                         $"<b>–¢–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω:</b> {currentRange}\n\n" +
                         $"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n" +
                         $"‚Ä¢ <b>1000-5000</b> (–æ—Ç 1000‚ÇΩ –¥–æ 5000‚ÇΩ)\n" +
                         $"‚Ä¢ <b>1000-</b> (–æ—Ç 1000‚ÇΩ –∏ –≤—ã—à–µ)\n" +
                         $"‚Ä¢ <b>-5000</b> (–¥–æ 5000‚ÇΩ)\n" +
                         $"‚Ä¢ <b>–æ—á–∏—Å—Ç–∏—Ç—å</b> (—É–±—Ä–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ü–µ–Ω–µ)";

            var keyboard = new TelegramInlineKeyboardMarkup();
            keyboard.InlineKeyboard.Add(new List<TelegramInlineKeyboardButton>
            {
                new TelegramInlineKeyboardButton 
                { 
                    Text = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                    CallbackData = TelegramCallbacks.EditNotification + preferenceId 
                }
            });

            await _telegramService.SendMessageWithKeyboardAsync(chatId, message, keyboard, cancellationToken);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        private async Task ProcessCreateNotificationStateAsync(string chatId, string telegramId, string messageText, TelegramUserState userState, CancellationToken cancellationToken)
        {
            // –í –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —É–ø—Ä–æ—â–µ–Ω–æ - —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await _telegramService.SendNotificationAsync(chatId, 
                "üìù –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.\n\n" +
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –≤ —Ä–∞–∑–¥–µ–ª \"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\" –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.", 
                cancellationToken);

            await _telegramService.ClearUserStateAsync(telegramId, cancellationToken);
            await ShowMainMenuAsync(chatId, telegramId, cancellationToken);
        }

        private async Task ProcessEditKeywordsStateAsync(string chatId, string telegramId, string messageText, TelegramUserState userState, CancellationToken cancellationToken)
        {
            var preferenceId = int.Parse(userState.StateData);
            var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
            
            using var scope = _scopeFactory.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<UsersDbContext>();

            var preference = await context.UserNotificationPreferences
                .FirstOrDefaultAsync(p => p.Id == preferenceId && p.UserId == user.Id, cancellationToken);

            if (preference == null)
            {
                await _telegramService.SendNotificationAsync(chatId, "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", cancellationToken);
                await _telegramService.ClearUserStateAsync(telegramId, cancellationToken);
                return;
            }

            if (messageText.ToLower() == "–æ—á–∏—Å—Ç–∏—Ç—å")
            {
                preference.Keywords = "";
            }
            else
            {
                // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                var keywords = messageText.Trim();
                if (keywords.Length > 500)
                {
                    await _telegramService.SendNotificationAsync(chatId, 
                        "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.", 
                        cancellationToken);
                    return;
                }
                preference.Keywords = keywords;
            }

            preference.UpdatedAt = DateTime.UtcNow;
            await context.SaveChangesAsync(cancellationToken);

            await _telegramService.ClearUserStateAsync(telegramId, cancellationToken);
            await _telegramService.SendNotificationAsync(chatId, "‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", cancellationToken);
            
            await ShowEditNotificationMenuAsync(chatId, telegramId, preferenceId, cancellationToken);
        }

        private async Task ProcessEditPriceStateAsync(string chatId, string telegramId, string messageText, TelegramUserState userState, CancellationToken cancellationToken)
        {
            var preferenceId = int.Parse(userState.StateData);
            var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
            
            using var scope = _scopeFactory.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<UsersDbContext>();

            var preference = await context.UserNotificationPreferences
                .FirstOrDefaultAsync(p => p.Id == preferenceId && p.UserId == user.Id, cancellationToken);

            if (preference == null)
            {
                await _telegramService.SendNotificationAsync(chatId, "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", cancellationToken);
                await _telegramService.ClearUserStateAsync(telegramId, cancellationToken);
                return;
            }

            var input = messageText.ToLower().Trim();

            if (input == "–æ—á–∏—Å—Ç–∏—Ç—å")
            {
                preference.MinPrice = 0;
                preference.MaxPrice = 0;
            }
            else
            {
                // –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                if (!TryParsePriceRange(input, out decimal minPrice, out decimal maxPrice))
                {
                    await _telegramService.SendNotificationAsync(chatId, 
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 1000-5000, 1000-, -5000 –∏–ª–∏ '–æ—á–∏—Å—Ç–∏—Ç—å'", 
                        cancellationToken);
                    return;
                }

                preference.MinPrice = minPrice;
                preference.MaxPrice = maxPrice;
            }

            preference.UpdatedAt = DateTime.UtcNow;
            await context.SaveChangesAsync(cancellationToken);

            await _telegramService.ClearUserStateAsync(telegramId, cancellationToken);
            await _telegramService.SendNotificationAsync(chatId, "‚úÖ –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!", cancellationToken);
            
            await ShowEditNotificationMenuAsync(chatId, telegramId, preferenceId, cancellationToken);
        }

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

        private TelegramInlineKeyboardMarkup CreateEditNotificationKeyboard(UserNotificationPreference preference)
        {
            var keyboard = new TelegramInlineKeyboardMarkup();

            // –°—Ç–∞—Ç—É—Å (–≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å)
            var statusText = preference.IsEnabled ? "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å" : "‚úÖ –í–∫–ª—é—á–∏—Ç—å";
            keyboard.InlineKeyboard.Add(new List<TelegramInlineKeyboardButton>
            {
                new TelegramInlineKeyboardButton 
                { 
                    Text = statusText, 
                    CallbackData = TelegramCallbacks.ToggleEnabled + preference.Id 
                }
            });

            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π
            keyboard.InlineKeyboard.Add(new List<TelegramInlineKeyboardButton>
            {
                new TelegramInlineKeyboardButton 
                { 
                    Text = "üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", 
                    CallbackData = TelegramCallbacks.EditKeywords + preference.Id 
                },
                new TelegramInlineKeyboardButton 
                { 
                    Text = "üí∞ –¶–µ–Ω–∞", 
                    CallbackData = TelegramCallbacks.EditPrice + preference.Id 
                }
            });

            // –£–¥–∞–ª–µ–Ω–∏–µ –∏ –Ω–∞–∑–∞–¥
            keyboard.InlineKeyboard.Add(new List<TelegramInlineKeyboardButton>
            {
                new TelegramInlineKeyboardButton 
                { 
                    Text = "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                    CallbackData = TelegramCallbacks.DeleteNotification + preference.Id 
                },
                new TelegramInlineKeyboardButton 
                { 
                    Text = "üîô –ù–∞–∑–∞–¥", 
                    CallbackData = TelegramCallbacks.BackToSettings 
                }
            });

            return keyboard;
        }

        private bool TryParsePriceRange(string input, out decimal minPrice, out decimal maxPrice)
        {
            minPrice = 0;
            maxPrice = 0;

            try
            {
                if (input.Contains("-"))
                {
                    var parts = input.Split('-');
                    if (parts.Length == 2)
                    {
                        if (!string.IsNullOrWhiteSpace(parts[0]))
                        {
                            if (!decimal.TryParse(parts[0].Trim(), out minPrice))
                                return false;
                        }

                        if (!string.IsNullOrWhiteSpace(parts[1]))
                        {
                            if (!decimal.TryParse(parts[1].Trim(), out maxPrice))
                                return false;
                        }

                        return true;
                    }
                }
                else
                {
                    // –û–¥–Ω–æ —á–∏—Å–ª–æ - —ç—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
                    if (decimal.TryParse(input, out minPrice))
                    {
                        return true;
                    }
                }
            }
            catch
            {
                return false;
            }

            return false;
        }
    }
}

