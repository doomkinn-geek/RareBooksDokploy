using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using RareBooksService.Common.Models;
using RareBooksService.Common.Models.Telegram;
using RareBooksService.Data;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using Iveonik.Stemmers;
using LanguageDetection;

namespace RareBooksService.WebApi.Services
{
    public interface ITelegramBotService
    {
        Task ProcessUpdateAsync(TelegramUpdate update, CancellationToken cancellationToken = default);
        Task<List<RegularBaseBook>> FindMatchingBooksAsync(List<UserNotificationPreference> preferences, List<int> bookIds = null, CancellationToken cancellationToken = default);
        Task<int> ProcessNewBookNotificationsAsync(List<int> newBookIds, CancellationToken cancellationToken = default);
        Task<int> TestNotificationsAsync(int limitBooks, bool showBookIds = false, CancellationToken cancellationToken = default);
    }

    public partial class TelegramBotService : ITelegramBotService
    {
        private readonly ITelegramNotificationService _telegramService;
        private readonly IServiceScopeFactory _scopeFactory;
        private readonly ILogger<TelegramBotService> _logger;
        private readonly ITelegramLinkService _linkService;
        private readonly Dictionary<string, IStemmer> _stemmers;
        private static readonly LanguageDetector _languageDetector;

        // –°–æ–∑–¥–∞—ë–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —è–∑—ã–∫–∞ –æ–¥–∏–Ω —Ä–∞–∑
        static TelegramBotService()
        {
            _languageDetector = new LanguageDetector();
            _languageDetector.AddAllLanguages();
        }

        public TelegramBotService(
            ITelegramNotificationService telegramService,
            IServiceScopeFactory scopeFactory,
            ILogger<TelegramBotService> logger,
            ITelegramLinkService linkService)
        {
            _telegramService = telegramService ?? throw new ArgumentNullException(nameof(telegramService));
            _scopeFactory = scopeFactory ?? throw new ArgumentNullException(nameof(scopeFactory));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _linkService = linkService ?? throw new ArgumentNullException(nameof(linkService));
            
            _stemmers = new Dictionary<string, IStemmer>
            {
                { "rus", new RussianStemmer() },
                { "eng", new EnglishStemmer() },
                { "fra", new FrenchStemmer() },
                { "deu", new GermanStemmer() },
                { "ita", new ItalianStemmer() },
                { "fin", new FinnishStemmer() }
            };
        }

        public async Task ProcessUpdateAsync(TelegramUpdate update, CancellationToken cancellationToken = default)
        {
            try
            {
                if (update.Message != null)
                {
                    await ProcessMessageAsync(update.Message, cancellationToken);
                }
                else if (update.CallbackQuery != null)
                {
                    await ProcessCallbackQueryAsync(update.CallbackQuery, cancellationToken);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram: {UpdateId}", update.UpdateId);
            }
        }

        private async Task ProcessMessageAsync(TelegramMessage message, CancellationToken cancellationToken)
        {
            var chatId = message.Chat.Id.ToString();
            var telegramId = message.From.Id.ToString();
            var messageText = message.Text?.Trim();

            _logger.LogInformation("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TelegramId}: {Message}", telegramId, messageText);

            if (string.IsNullOrEmpty(messageText))
                return;

            // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var userState = await _telegramService.GetUserStateAsync(telegramId, cancellationToken);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (messageText.StartsWith("/"))
            {
                await ProcessCommandAsync(chatId, telegramId, messageText, cancellationToken);
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
            if (userState != null && userState.State != TelegramBotStates.None)
            {
                await ProcessUserStateAsync(chatId, telegramId, messageText, userState, cancellationToken);
                return;
            }

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
            await ShowMainMenuAsync(chatId, telegramId, cancellationToken);
        }

        private async Task ProcessCommandAsync(string chatId, string telegramId, string command, CancellationToken cancellationToken)
        {
            _logger.LogInformation("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É: '{Command}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TelegramId}", command, telegramId);
            
            // –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            var commandParts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            var baseCommand = commandParts[0].ToLower();
            
            switch (baseCommand)
            {
                case "/start":
                    await HandleStartCommandAsync(chatId, telegramId, cancellationToken);
                    break;
                case "/help":
                    await HandleHelpCommandAsync(chatId, cancellationToken);
                    break;
                case "/settings":
                    await HandleSettingsCommandAsync(chatId, telegramId, cancellationToken);
                    break;
                case "/list":
                    await HandleListCommandAsync(chatId, telegramId, cancellationToken);
                    break;
                case "/cancel":
                    await HandleCancelCommandAsync(chatId, telegramId, cancellationToken);
                    break;
                case "/link":
                    await HandleLinkCommandAsync(chatId, telegramId, command, cancellationToken);
                    break;
                case "/register":
                    await HandleRegisterCommandAsync(chatId, telegramId, command, cancellationToken);
                    break;
                case "/login":
                    await HandleLoginCommandAsync(chatId, telegramId, command, cancellationToken);
                    break;
                case "/lots":
                    await HandleLotsCommandAsync(chatId, telegramId, command, cancellationToken);
                    break;
                default:
                    _logger.LogWarning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{Command}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TelegramId}", command, telegramId);
                    await _telegramService.SendMessageWithKeyboardAsync(chatId, 
                        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", 
                        cancellationToken: cancellationToken);
                    break;
            }
        }

        private async Task HandleStartCommandAsync(string chatId, string telegramId, CancellationToken cancellationToken)
        {
            var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);

            var welcomeMessage = new StringBuilder();
            welcomeMessage.AppendLine("ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–¥–∫–∏—Ö –∫–Ω–∏–≥–∞—Ö!</b>");
            welcomeMessage.AppendLine();

            if (user == null)
            {
                welcomeMessage.AppendLine("üìã <b>–í–∞—à Telegram ID:</b> <code>" + telegramId + "</code>");
                welcomeMessage.AppendLine();
                welcomeMessage.AppendLine("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:");
                welcomeMessage.AppendLine("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID –≤—ã—à–µ");
                welcomeMessage.AppendLine("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –≤ —Ä–∞–∑–¥–µ–ª \"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\"");
                welcomeMessage.AppendLine("3. –ü—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à Telegram ID –∫ –∞–∫–∫–∞—É–Ω—Ç—É");
                welcomeMessage.AppendLine("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∫–Ω–∏–≥");
            }
            else
            {
                welcomeMessage.AppendLine($"üëã –ü—Ä–∏–≤–µ—Ç, {user.UserName ?? "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}!");
                welcomeMessage.AppendLine();
                welcomeMessage.AppendLine("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.");
                welcomeMessage.AppendLine("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:");
                
                var keyboard = new TelegramInlineKeyboardMarkup(); // TODO: Implement CreateMainMenuKeyboard
                await _telegramService.SendMessageWithKeyboardAsync(chatId, welcomeMessage.ToString(), keyboard, cancellationToken);
                return;
            }

            var helpKeyboard = new TelegramInlineKeyboardMarkup();
            helpKeyboard.InlineKeyboard.Add(new List<TelegramInlineKeyboardButton>
            {
                new TelegramInlineKeyboardButton 
                { 
                    Text = "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", 
                    CallbackData = TelegramCallbacks.Help 
                }
            });

            await _telegramService.SendMessageWithKeyboardAsync(chatId, welcomeMessage.ToString(), helpKeyboard, cancellationToken);
        }

        private async Task HandleHelpCommandAsync(string chatId, CancellationToken cancellationToken)
        {
            var helpMessage = new StringBuilder();
            helpMessage.AppendLine("üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞</b>");
            helpMessage.AppendLine();
            helpMessage.AppendLine("üîë <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥:</b>");
            helpMessage.AppendLine("/register EMAIL –ü–ê–†–û–õ–¨ - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç");
            helpMessage.AppendLine("/login EMAIL –ü–ê–†–û–õ–¨ - –í–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç");
            helpMessage.AppendLine("/link –¢–û–ö–ï–ù - –ü—Ä–∏–≤—è–∑–∫–∞ —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω —Å —Å–∞–π—Ç–∞");
            helpMessage.AppendLine();
            helpMessage.AppendLine("üîß <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>");
            helpMessage.AppendLine("/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ ID");
            helpMessage.AppendLine("/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É");
            helpMessage.AppendLine("/settings - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
            helpMessage.AppendLine("/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
            helpMessage.AppendLine("/lots - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º");
            helpMessage.AppendLine("/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é");
            helpMessage.AppendLine();
            helpMessage.AppendLine("üöÄ <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>");
            helpMessage.AppendLine("1. <code>/register email@example.com –ø–∞—Ä–æ–ª—å</code>");
            helpMessage.AppendLine("2. <code>/settings</code> - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
            helpMessage.AppendLine("3. <code>/lots</code> - —Å–º–æ—Ç—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã");
            helpMessage.AppendLine("4. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥–∞—Ö!");
            helpMessage.AppendLine();
            helpMessage.AppendLine("üìö <b>–ü–æ–∏—Å–∫ –ª–æ—Ç–æ–≤:</b>");
            helpMessage.AppendLine("‚Ä¢ <code>/lots</code> - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã (—Å—Ç—Ä. 1)");
            helpMessage.AppendLine("‚Ä¢ <code>/lots 2</code> - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É 2");
            helpMessage.AppendLine("‚Ä¢ –õ–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è –ø–æ –≤–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º");
            helpMessage.AppendLine();
            helpMessage.AppendLine("üìù <b>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±:</b>");
            helpMessage.AppendLine("‚Ä¢ –ó–∞–π–¥–∏—Ç–µ –Ω–∞ rare-books.ru");
            helpMessage.AppendLine("‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ \"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\"");
            helpMessage.AppendLine("‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link");

            await _telegramService.SendNotificationAsync(chatId, helpMessage.ToString(), cancellationToken);
        }

        private async Task HandleSettingsCommandAsync(string chatId, string telegramId, CancellationToken cancellationToken)
        {
            var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
            if (user == null)
            {
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.", 
                    cancellationToken);
                return;
            }

            await ShowSettingsMenuAsync(chatId, telegramId, cancellationToken);
        }

        private async Task HandleListCommandAsync(string chatId, string telegramId, CancellationToken cancellationToken)
        {
            var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
            if (user == null)
            {
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–∏—Å—Ç–µ–º–µ.", 
                    cancellationToken);
                return;
            }

            var preferences = await _telegramService.GetUserNotificationPreferencesAsync(user.Id, cancellationToken);
            
            if (!preferences.Any())
            {
                await _telegramService.SendMessageWithKeyboardAsync(chatId, 
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", 
                    new TelegramInlineKeyboardMarkup(), // TODO: Implement CreateCreateNotificationKeyboard 
                    cancellationToken);
                return;
            }

            var listMessage = new StringBuilder();
            listMessage.AppendLine("üìã <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>");
            listMessage.AppendLine();

            foreach (var preference in preferences.Take(10)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
            {
                var status = preference.IsEnabled ? "‚úÖ" : "‚ùå";
                var keywords = string.IsNullOrEmpty(preference.Keywords) 
                    ? "–ù–µ –∑–∞–¥–∞–Ω—ã" 
                    : preference.Keywords.Length > 30 
                        ? preference.Keywords.Substring(0, 30) + "..." 
                        : preference.Keywords;

                listMessage.AppendLine($"{status} <b>ID {preference.Id}</b>");
                listMessage.AppendLine($"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}");
                listMessage.AppendLine($"   –ß–∞—Å—Ç–æ—Ç–∞: {preference.NotificationFrequencyMinutes} –º–∏–Ω");
                listMessage.AppendLine();
            }

            if (preferences.Count > 10)
            {
                listMessage.AppendLine($"... –∏ –µ—â–µ {preferences.Count - 10} –Ω–∞—Å—Ç—Ä–æ–µ–∫");
                listMessage.AppendLine();
            }

            var keyboard = CreateSettingsListKeyboard(preferences.Take(5).ToList()); // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await _telegramService.SendMessageWithKeyboardAsync(chatId, listMessage.ToString(), keyboard, cancellationToken);
        }

        private async Task HandleCancelCommandAsync(string chatId, string telegramId, CancellationToken cancellationToken)
        {
            await _telegramService.ClearUserStateAsync(telegramId, cancellationToken);
            await _telegramService.SendNotificationAsync(chatId, 
                "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", 
                cancellationToken);
        }

        private async Task ProcessCallbackQueryAsync(TelegramCallbackQuery callbackQuery, CancellationToken cancellationToken)
        {
            var chatId = callbackQuery.Message.Chat.Id.ToString();
            var telegramId = callbackQuery.From.Id.ToString();
            var data = callbackQuery.Data;

            _logger.LogInformation("–ü–æ–ª—É—á–µ–Ω callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TelegramId}: {Data}", telegramId, data);

            await _telegramService.AnswerCallbackQueryAsync(callbackQuery.Id, cancellationToken: cancellationToken);

            if (data == TelegramBotStates.CallbackSettings)
            {
                await ShowSettingsMenuAsync(chatId, telegramId, cancellationToken);
            }
            else if (data == TelegramBotStates.CallbackCreate)
            {
                await StartCreateNotificationAsync(chatId, telegramId, cancellationToken);
            }
            else if (data.StartsWith(TelegramBotStates.CallbackEdit))
            {
                var preferenceId = int.Parse(data.Replace(TelegramBotStates.CallbackEdit, ""));
                await ShowEditNotificationMenuAsync(chatId, telegramId, preferenceId, cancellationToken);
            }
            else if (data.StartsWith(TelegramBotStates.CallbackDelete))
            {
                var preferenceId = int.Parse(data.Replace(TelegramBotStates.CallbackDelete, ""));
                await ShowDeleteConfirmationAsync(chatId, telegramId, preferenceId, cancellationToken);
            }
            else if (data.StartsWith(TelegramBotStates.CallbackDeleteConfirm))
            {
                var preferenceId = int.Parse(data.Replace(TelegramBotStates.CallbackDeleteConfirm, ""));
                await DeleteNotificationAsync(chatId, telegramId, preferenceId, cancellationToken);
            }
            else if (data.StartsWith(TelegramBotStates.CallbackToggle))
            {
                var preferenceId = int.Parse(data.Replace(TelegramBotStates.CallbackToggle, ""));
                await ToggleNotificationAsync(chatId, telegramId, preferenceId, cancellationToken);
            }
            else if (data == TelegramBotStates.CallbackSettings)
            {
                await ShowSettingsMenuAsync(chatId, telegramId, cancellationToken);
            }
            else if (data == TelegramBotStates.CallbackHelp)
            {
                await HandleHelpCommandAsync(chatId, cancellationToken);
            }
            else if (data == TelegramBotStates.CallbackCancel || data == TelegramBotStates.CallbackCancelDelete)
            {
                await _telegramService.ClearUserStateAsync(telegramId, cancellationToken);
                await ShowMainMenuAsync(chatId, telegramId, cancellationToken);
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            else if (data.StartsWith(TelegramBotStates.CallbackEditKeywords))
            {
                var preferenceId = int.Parse(data.Replace(TelegramBotStates.CallbackEditKeywords, ""));
                await StartEditKeywordsAsync(chatId, telegramId, preferenceId, cancellationToken);
            }
            else if (data.StartsWith(TelegramBotStates.CallbackEditPrice))
            {
                var preferenceId = int.Parse(data.Replace(TelegramBotStates.CallbackEditPrice, ""));
                await StartEditPriceAsync(chatId, telegramId, preferenceId, cancellationToken);
            }
            // –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
        }

        // ProcessUserStateAsync —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ TelegramBotServiceMethods.cs

        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ TelegramBotServiceMethods.cs

        // CreateCreateNotificationKeyboard —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ TelegramBotServiceMethods.cs

        private TelegramInlineKeyboardMarkup CreateSettingsListKeyboard(List<UserNotificationPreference> preferences)
        {
            var keyboard = new TelegramInlineKeyboardMarkup();

            foreach (var preference in preferences)
            {
                var status = preference.IsEnabled ? "‚úÖ" : "‚ùå";
                var keywords = string.IsNullOrEmpty(preference.Keywords) 
                    ? "–ù–∞—Å—Ç—Ä–æ–π–∫–∞" 
                    : preference.Keywords.Length > 15 
                        ? preference.Keywords.Substring(0, 15) + "..." 
                        : preference.Keywords;

                keyboard.InlineKeyboard.Add(new List<TelegramInlineKeyboardButton>
                {
                    new TelegramInlineKeyboardButton 
                    { 
                        Text = $"{status} {keywords}", 
                        CallbackData = TelegramBotStates.CallbackEdit + preference.Id 
                    }
                });
            }

            keyboard.InlineKeyboard.Add(new List<TelegramInlineKeyboardButton>
            {
                new TelegramInlineKeyboardButton 
                { 
                    Text = "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", 
                    CallbackData = TelegramBotStates.CallbackCreate 
                },
                new TelegramInlineKeyboardButton 
                { 
                    Text = "üîô –ù–∞–∑–∞–¥", 
                    CallbackData = TelegramBotStates.CallbackSettings 
                }
            });

            return keyboard;
        }

        // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (–±—É–¥—É—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω—ã)

        private async Task ShowMainMenuAsync(string chatId, string telegramId, CancellationToken cancellationToken)
        {
            var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
            if (user == null)
            {
                await HandleStartCommandAsync(chatId, telegramId, cancellationToken);
                return;
            }

            await _telegramService.SendNotificationAsync(chatId, 
                "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n/list - –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n/help - –°–ø—Ä–∞–≤–∫–∞", 
                cancellationToken);
        }

        private async Task ShowSettingsMenuAsync(string chatId, string telegramId, CancellationToken cancellationToken)
        {
            await HandleListCommandAsync(chatId, telegramId, cancellationToken);
        }

        private async Task HandleLinkCommandAsync(string chatId, string telegramId, string command, CancellationToken cancellationToken)
        {
            var parts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            
            if (parts.Length == 1)
            {
                // –ü—Ä–æ—Å—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /link –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
                var message = new StringBuilder();
                message.AppendLine("üîó <b>–ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ Telegram</b>");
                message.AppendLine();
                message.AppendLine("üí° <b>–ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):</b>");
                message.AppendLine("‚Ä¢ <code>/register email@example.com –ø–∞—Ä–æ–ª—å</code> - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç");
                message.AppendLine("‚Ä¢ <code>/login email@example.com –ø–∞—Ä–æ–ª—å</code> - –≤–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç");
                message.AppendLine();
                message.AppendLine("üìã <b>–ß–µ—Ä–µ–∑ —Å–∞–π—Ç (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±):</b>");
                message.AppendLine("1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç rare-books.ru");
                message.AppendLine("2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ —Å–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ");
                message.AppendLine("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª \"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\"");
                message.AppendLine("4. –ù–∞–∂–º–∏—Ç–µ \"–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram\"");
                message.AppendLine("5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω");
                message.AppendLine("6. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/link –í–ê–®_–¢–û–ö–ï–ù</code>");

                await _telegramService.SendNotificationAsync(chatId, message.ToString(), cancellationToken);
                return;
            }

            if (parts.Length != 2)
            {
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/link –í–ê–®_–¢–û–ö–ï–ù</code>", 
                    cancellationToken);
                return;
            }

            var token = parts[1].Trim().ToUpper();

            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ Telegram
                var telegramUser = await _telegramService.GetUserInfoAsync(chatId, cancellationToken);
                var telegramUsername = telegramUser?.Username;

                var result = await _linkService.LinkTelegramAccountAsync(token, telegramId, telegramUsername, cancellationToken);

                if (result.Success)
                {
                    var successMessage = new StringBuilder();
                    successMessage.AppendLine("üéâ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!</b>");
                    successMessage.AppendLine();
                    successMessage.AppendLine($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result.User.UserName ?? result.User.Email}");
                    successMessage.AppendLine();
                    successMessage.AppendLine("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:");
                    successMessage.AppendLine("‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞");
                    successMessage.AppendLine("‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∫–Ω–∏–≥–∞—Ö");
                    successMessage.AppendLine("‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:");
                    successMessage.AppendLine("  /settings - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏");
                    successMessage.AppendLine("  /list - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫");

                    await _telegramService.SendNotificationAsync(chatId, successMessage.ToString(), cancellationToken);
                }
                else
                {
                    await _telegramService.SendNotificationAsync(chatId, 
                        $"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏:</b> {result.ErrorMessage}", 
                        cancellationToken);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è Telegram ID {TelegramId}", telegramId);
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                    cancellationToken);
            }
        }

        private async Task HandleRegisterCommandAsync(string chatId, string telegramId, string command, CancellationToken cancellationToken)
        {
            var parts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            
            if (parts.Length == 1)
            {
                // –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ
                var helpMessage = new StringBuilder();
                helpMessage.AppendLine("üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</b>");
                helpMessage.AppendLine();
                helpMessage.AppendLine("–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:");
                helpMessage.AppendLine("<code>/register EMAIL –ü–ê–†–û–õ–¨</code>");
                helpMessage.AppendLine();
                helpMessage.AppendLine("–ü—Ä–∏–º–µ—Ä:");
                helpMessage.AppendLine("<code>/register ivan@example.com MyPassword123</code>");
                helpMessage.AppendLine();
                helpMessage.AppendLine("‚ö†Ô∏è <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:</b>");
                helpMessage.AppendLine("‚Ä¢ –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤");
                helpMessage.AppendLine("‚Ä¢ –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã");

                await _telegramService.SendNotificationAsync(chatId, helpMessage.ToString(), cancellationToken);
                return;
            }

            if (parts.Length != 3)
            {
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/register EMAIL –ü–ê–†–û–õ–¨</code>", 
                    cancellationToken);
                return;
            }

            var email = parts[1].Trim();
            var password = parts[2].Trim();

            try
            {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                var existingUser = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
                if (existingUser != null)
                {
                    await _telegramService.SendNotificationAsync(chatId, 
                        $"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {existingUser.Email}", 
                        cancellationToken);
                    return;
                }

                var result = await RegisterUserDirectlyAsync(email, password, telegramId, cancellationToken);

                if (result.IsSuccess)
                {
                    var successMessage = new StringBuilder();
                    successMessage.AppendLine("üéâ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω!</b>");
                    successMessage.AppendLine();
                    successMessage.AppendLine($"üìß Email: {email}");
                    successMessage.AppendLine($"üÜî Telegram ID: {telegramId}");
                    successMessage.AppendLine();
                    successMessage.AppendLine("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:");
                    successMessage.AppendLine("‚Ä¢ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
                    successMessage.AppendLine("‚Ä¢ /list - –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫");
                    successMessage.AppendLine("‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥–∞—Ö");

                    await _telegramService.SendNotificationAsync(chatId, successMessage.ToString(), cancellationToken);
                }
                else
                {
                    await _telegramService.SendNotificationAsync(chatId, 
                        $"‚ùå <b>–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {result.ErrorMessage}", 
                        cancellationToken);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram ID {TelegramId}", telegramId);
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                    cancellationToken);
            }
        }

        private async Task HandleLoginCommandAsync(string chatId, string telegramId, string command, CancellationToken cancellationToken)
        {
            var parts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            
            if (parts.Length == 1)
            {
                // –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ
                var helpMessage = new StringBuilder();
                helpMessage.AppendLine("üîë <b>–í—Ö–æ–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç</b>");
                helpMessage.AppendLine();
                helpMessage.AppendLine("–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:");
                helpMessage.AppendLine("<code>/login EMAIL –ü–ê–†–û–õ–¨</code>");
                helpMessage.AppendLine();
                helpMessage.AppendLine("–ü—Ä–∏–º–µ—Ä:");
                helpMessage.AppendLine("<code>/login ivan@example.com MyPassword123</code>");
                helpMessage.AppendLine();
                helpMessage.AppendLine("üìù –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:");
                helpMessage.AppendLine("<code>/register EMAIL –ü–ê–†–û–õ–¨</code>");

                await _telegramService.SendNotificationAsync(chatId, helpMessage.ToString(), cancellationToken);
                return;
            }

            if (parts.Length != 3)
            {
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/login EMAIL –ü–ê–†–û–õ–¨</code>", 
                    cancellationToken);
                return;
            }

            var email = parts[1].Trim();
            var password = parts[2].Trim();

            try
            {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                var existingUser = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
                if (existingUser != null)
                {
                    await _telegramService.SendNotificationAsync(chatId, 
                        $"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {existingUser.Email}", 
                        cancellationToken);
                    return;
                }

                var result = await LoginUserDirectlyAsync(email, password, telegramId, cancellationToken);

                if (result.IsSuccess)
                {
                    var successMessage = new StringBuilder();
                    successMessage.AppendLine("üéâ <b>–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∏ –ø—Ä–∏–≤—è–∑–∫–∞!</b>");
                    successMessage.AppendLine();
                    successMessage.AppendLine($"üìß Email: {email}");
                    successMessage.AppendLine($"üÜî Telegram ID: {telegramId}");
                    successMessage.AppendLine();
                    successMessage.AppendLine("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:");
                    successMessage.AppendLine("‚Ä¢ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
                    successMessage.AppendLine("‚Ä¢ /list - –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫");
                    successMessage.AppendLine("‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥–∞—Ö");

                    await _telegramService.SendNotificationAsync(chatId, successMessage.ToString(), cancellationToken);
                }
                else
                {
                    await _telegramService.SendNotificationAsync(chatId, 
                        $"‚ùå <b>–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:</b> {result.ErrorMessage}", 
                        cancellationToken);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram ID {TelegramId}", telegramId);
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                    cancellationToken);
            }
        }

        private async Task ProcessUserStateAsync(string chatId, string telegramId, string messageText, TelegramUserState userState, CancellationToken cancellationToken)
        {
            switch (userState.State)
            {
                case TelegramBotStates.EditingKeywords:
                    await ProcessEditKeywordsStateAsync(chatId, telegramId, messageText, userState, cancellationToken);
                    break;
                case TelegramBotStates.EditingPrice:
                    await ProcessEditPriceStateAsync(chatId, telegramId, messageText, userState, cancellationToken);
                    break;
                case TelegramBotStates.CreatingNotification:
                    await ProcessCreateNotificationStateAsync(chatId, telegramId, messageText, userState, cancellationToken);
                    break;
                default:
                    await _telegramService.ClearUserStateAsync(telegramId, cancellationToken);
                    await ShowMainMenuAsync(chatId, telegramId, cancellationToken);
                    break;
            }
        }

        private async Task HandleLotsCommandAsync(string chatId, string telegramId, string command, CancellationToken cancellationToken)
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
                if (user == null)
                {
                    await _telegramService.SendNotificationAsync(chatId,
                        "‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.\n\n" +
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n" +
                        "‚Ä¢ <code>/register email@example.com –ø–∞—Ä–æ–ª—å</code>\n" +
                        "‚Ä¢ <code>/login email@example.com –ø–∞—Ä–æ–ª—å</code>",
                        cancellationToken);
                    return;
                }

                var parts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                int page = 1;
                int pageSize = 5;

                // –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if (parts.Length > 1 && int.TryParse(parts[1], out int requestedPage) && requestedPage > 0)
                {
                    page = requestedPage;
                }

                _logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {TelegramId} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {Page}", telegramId, page);

                using var scope = _scopeFactory.CreateScope();
                var usersContext = scope.ServiceProvider.GetRequiredService<UsersDbContext>();
                var booksContext = scope.ServiceProvider.GetRequiredService<BooksDbContext>();

                // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                var notificationPreferences = await usersContext.UserNotificationPreferences
                    .Where(np => np.UserId == user.Id && np.IsEnabled)
                    .FirstOrDefaultAsync(cancellationToken);

                if (notificationPreferences == null)
                {
                    await _telegramService.SendNotificationAsync(chatId,
                        "üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞.\n\n" +
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/settings</code> –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥.",
                        cancellationToken);
                    return;
                }

                // –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                var activeLotsResult = await SearchActiveLotsAsync(booksContext, notificationPreferences, page, pageSize, cancellationToken);

                if (activeLotsResult.TotalCount == 0)
                {
                    await _telegramService.SendNotificationAsync(chatId,
                        "üì≠ <b>–ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤</b>\n\n" +
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n" +
                        "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞: <code>/settings</code>\n" +
                        "‚Ä¢ –†–∞—Å—à–∏—Ä–∏—Ç—å —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω\n" +
                        "‚Ä¢ –£–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –≥–æ—Ä–æ–¥—É –∏–ª–∏ –≥–æ–¥—É",
                        cancellationToken);
                    return;
                }

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                var message = await FormatLotsMessageAsync(activeLotsResult, page, pageSize, notificationPreferences, cancellationToken);
                
                _logger.LogInformation("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {TelegramId} —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å {Count} –ª–æ—Ç–∞–º–∏, —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: {MessageLength} —Å–∏–º–≤–æ–ª–æ–≤", 
                    telegramId, activeLotsResult.Books.Count, message.Length);
                    
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bool sendResult = await _telegramService.SendNotificationAsync(chatId, message, cancellationToken);
                
                if (sendResult) {
                    _logger.LogInformation("–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {TelegramId}", telegramId);
                } else {
                    _logger.LogError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {TelegramId}. –†–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: {MessageLength}", 
                        telegramId, message.Length);
                        
                    // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
                    await _telegramService.SendNotificationAsync(chatId, 
                        "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞</b>\n\n–í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è Telegram API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.", 
                        cancellationToken);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /lots –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TelegramId}", telegramId);
                await _telegramService.SendNotificationAsync(chatId,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    cancellationToken);
            }
        }

        private async Task<LotsSearchResult> SearchActiveLotsAsync(BooksDbContext booksContext, UserNotificationPreference preferences, int page, int pageSize, CancellationToken cancellationToken)
        {
            _logger.LogInformation("–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤...");
            
            var query = booksContext.BooksInfo.Include(b => b.Category).AsQueryable();

            // –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–∏ (—Ç–æ—Ä–≥–∏ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å)
            var now = DateTime.UtcNow;
            query = query.Where(b => b.EndDate > now);

            _logger.LogInformation("–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–æ—Ä–≥–∞–º");

            // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–¥–µ–ª–∞–µ–º –≤ SQL)
            /*var categoryIds = preferences.GetCategoryIdsList();
            if (categoryIds.Any())
            {
                query = query.Where(b => categoryIds.Contains(b.CategoryId));
                _logger.LogInformation("–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {CategoryIds}", string.Join(", ", categoryIds));
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ (–¥–µ–ª–∞–µ–º –≤ SQL)
            if (preferences.MinPrice > 0)
            {
                query = query.Where(b => (decimal)b.Price >= preferences.MinPrice);
                _logger.LogInformation("–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã: {MinPrice}", preferences.MinPrice);
            }
            if (preferences.MaxPrice > 0)
            {
                query = query.Where(b => (decimal)b.Price <= preferences.MaxPrice);
                _logger.LogInformation("–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã: {MaxPrice}", preferences.MaxPrice);
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É –∏–∑–¥–∞–Ω–∏—è (–¥–µ–ª–∞–µ–º –≤ SQL)
            if (preferences.MinYear > 0)
            {
                query = query.Where(b => b.YearPublished >= preferences.MinYear);
                _logger.LogInformation("–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞: {MinYear}", preferences.MinYear);
            }
            if (preferences.MaxYear > 0)
            {
                query = query.Where(b => b.YearPublished <= preferences.MaxYear);
                _logger.LogInformation("–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞: {MaxYear}", preferences.MaxYear);
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥–∞–º (–¥–µ–ª–∞–µ–º –≤ SQL)
            var cities = preferences.GetCitiesList();
            if (cities.Any())
            {
                var normalizedCities = cities.Select(c => c.ToLower()).ToList();
                
                foreach (var city in normalizedCities)
                {
                    query = query.Where(b => EF.Functions.ILike(b.City, $"%{city}%"));
                }
                _logger.LogInformation("–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥–∞–º: {Cities}", string.Join(", ", normalizedCities));
            }*/

            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–±–ª–∏–∂–∞–π—à–∏–µ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é - –ø–µ—Ä–≤—ã–º–∏)
            query = query.OrderBy(b => b.EndDate);

            _logger.LogInformation("–ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞...");
            
            // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤
            var totalActiveCount = await query.CountAsync(cancellationToken);
            _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ –≤ –±–∞–∑–µ: {TotalActive}", totalActiveCount);
            
            // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            var randomActiveBooks = await query
                .Take(5)
                .Select(b => new { b.Id, b.Title, b.Tags, b.BeginDate, b.EndDate })
                .ToListAsync(cancellationToken);
                
            _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–∏–º–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤:");
            for (int i = 0; i < randomActiveBooks.Count; i++)
            {
                var book = randomActiveBooks[i];
                _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ—Ç {Index}: Id={Id}, Title='{Title}', Tags=[{Tags}], BeginDate={BeginDate}, EndDate={EndDate}", 
                    i + 1, book.Id, 
                    book.Title?.Substring(0, Math.Min(50, book.Title?.Length ?? 0)),
                    //book.NormalizedTitle?.Substring(0, Math.Min(50, book.NormalizedTitle?.Length ?? 0)),
                    book.Tags != null ? string.Join(", ", book.Tags.Take(3)) : "–Ω–µ—Ç",
                    book.BeginDate,
                    book.EndDate);
            }

            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö (–º–µ–Ω–µ–µ 1000 –∑–∞–ø–∏—Å–µ–π) –±–µ—Ä–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            var keywords = preferences.GetKeywordsList();
            List<RegularBaseBook> allBooks;
            
            // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –µ—Å–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç "DEBUG", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            var isDebugMode = keywords.Any(k => k.ToUpper().Contains("DEBUG"));
            if (isDebugMode)
            {
                _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í–∫–ª—é—á–µ–Ω DEBUG —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ—Ç—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º");
                allBooks = await query
                    .Skip((page - 1) * pageSize)
                    .Take(pageSize)
                    .AsNoTracking()
                    .ToListAsync(cancellationToken);
                    
                _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {Count} –∑–∞–ø–∏—Å–µ–π –≤ DEBUG —Ä–µ–∂–∏–º–µ", allBooks.Count);
            }
            else if (keywords.Any())
            {
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö –±–µ—Ä–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏
                // –≠—Ç–æ –±—ã–ª–æ –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!
                if (totalActiveCount <= 1000)
                {
                    allBooks = await query
                        .AsNoTracking()
                        .ToListAsync(cancellationToken);
                    _logger.LogInformation("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –í–°–ï {Count} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–Ω–µ–±–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö)", allBooks.Count);
                }
                else
                {
                    // –î–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –±–µ—Ä–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    var batchSize = Math.Max(pageSize * 20, 1000); // –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç
                    allBooks = await query
                        .Take(batchSize)
                        .AsNoTracking()
                        .ToListAsync(cancellationToken);
                    _logger.LogInformation("–ó–∞–≥—Ä—É–∂–µ–Ω–æ {Count} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–±–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö)", allBooks.Count);
                }

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ —Å—Ç–µ–º–º–∏–Ω–≥ (–∫–∞–∫ –≤ RegularBaseBooksRepository)
                _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {Keywords}", string.Join(", ", keywords));
                
                // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ —Å–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä —Å—Ç–µ–º–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
                var keywordGroups = new List<List<string>>();
                var originalKeywords = new List<string>(); // –î–ª—è fallback-–ø–æ–∏—Å–∫–∞
                
                foreach (var keyword in keywords)
                {
                    var keywordSearchTerms = new List<string>();
                    var lowerKeyword = keyword.ToLower();
                    originalKeywords.Add(lowerKeyword);
                    
                    try
                    {
                        string detectedLanguage;
                        var processedKeyword = PreprocessText(keyword, out detectedLanguage);
                        var keywordParts = processedKeyword.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                        
                        _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: '{OriginalKeyword}' -> —è–∑—ã–∫: {Language} -> —Å—Ç–µ–º–º–∏–Ω–≥: '{ProcessedKeyword}' -> —á–∞—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞: [{Parts}]", 
                            keyword, detectedLanguage, processedKeyword, string.Join(", ", keywordParts));
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–º–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
                        keywordSearchTerms.AddRange(keywordParts);
                        
                        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
                        if (!keywordSearchTerms.Contains(lowerKeyword))
                        {
                            keywordSearchTerms.Add(lowerKeyword);
                            _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ: '{OriginalKeyword}'", lowerKeyword);
                        }
                        
                        // –ù–û–í–û–ï: –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è —É—á–µ—Ç–∞ —Å–∫–ª–æ–Ω–µ–Ω–∏–π (–ø–µ—Ä–≤—ã–µ 4-6 —Å–∏–º–≤–æ–ª–æ–≤)
                        if (lowerKeyword.Length >= 4)
                        {
                            var partialWord = lowerKeyword.Substring(0, Math.Min(lowerKeyword.Length - 1, 6));
                            if (!keywordSearchTerms.Contains(partialWord))
                            {
                                keywordSearchTerms.Add(partialWord);
                                _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏–π: '{PartialWord}'", partialWord);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogWarning(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ '{Keyword}', –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫", keyword);
                        keywordSearchTerms.Add(lowerKeyword);
                        _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: '{OriginalKeyword}' -> –û–®–ò–ë–ö–ê -> –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫: '{SimpleKeyword}'", 
                            keyword, lowerKeyword);
                    }
                    
                    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    keywordSearchTerms = keywordSearchTerms.Distinct().ToList();
                    keywordGroups.Add(keywordSearchTerms);
                }

                _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ò—Ç–æ–≥–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞: [{Groups}]", 
                    string.Join(" | ", keywordGroups.Select(g => "[" + string.Join(", ", g) + "]")));
                    
                // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–µ–º–º–∏–Ω–≥ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤–∞—Ö
                var testWords = new[] { "–∫–Ω–∏–≥–∞", "–∫–Ω–∏–≥–∏", "–∫–Ω–∏–≥", "–ø—É—à–∫–∏–Ω", "–ø—É—à–∫–∏–Ω–∞", "–≥–µ–ª—å–º–æ–ª—å—Ç", "–≥–µ–ª—å–º–≥–æ–ª—å—Ü" };
                _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–µ–º–º–∏–Ω–≥–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤–∞—Ö:");
                foreach (var testWord in testWords)
                {
                    try
                    {
                        string detectedLang;
                        var stemmed = PreprocessText(testWord, out detectedLang);
                        _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–ï–°–¢ '{TestWord}' -> —è–∑—ã–∫: {Lang} -> —Å—Ç–µ–º–º–∏–Ω–≥: '{Stemmed}'", 
                            testWord, detectedLang, stemmed);
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û–®–ò–ë–ö–ê —Å—Ç–µ–º–º–∏–Ω–≥–∞ –¥–ª—è '{TestWord}'", testWord);
                    }
                }
                
                // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                var sampleBooks = allBooks.Take(3).ToList();
                for (int i = 0; i < sampleBooks.Count; i++)
                {
                    var book = sampleBooks[i];
                    _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ö–Ω–∏–≥–∞ {Index}: Id={Id}, Title='{Title}', NormalizedTitle='{NormalizedTitle}', NormalizedDescription='{NormalizedDesc}'", 
                        i + 1, book.Id, book.Title?.Substring(0, Math.Min(50, book.Title.Length)), 
                        book.NormalizedTitle?.Substring(0, Math.Min(50, book.NormalizedTitle.Length)),
                        book.NormalizedDescription?.Substring(0, Math.Min(100, book.NormalizedDescription?.Length ?? 0)));
                }
                
                // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å—á–µ—Ç—á–∏–∫ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                int totalChecked = 0;
                int matchedByText = 0;
                int matchedByTags = 0;
                int matchedByFallback = 0;
                
                allBooks = allBooks.Where(book =>
                {
                    totalChecked++;
                    
                    // –û–°–ù–û–í–ù–û–ô –ü–û–ò–°–ö: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–µ–º–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—è—Ö
                    var matchesText = keywordGroups.All(group => 
                        group.Any(searchTerm =>
                            (book.NormalizedTitle?.Contains(searchTerm) == true) ||
                            (book.NormalizedDescription?.Contains(searchTerm) == true)));

                    // –ü–û–ò–°–ö –ü–û –¢–ï–ì–ê–ú: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–≥–∏ –Ω–µ —Å—Ç–µ–º–º–∏—Ä–æ–≤–∞–Ω—ã
                    var matchesTags = originalKeywords.All(originalKeyword =>
                        book.Tags?.Any(tag =>
                            tag.ToLower().Contains(originalKeyword)) == true);

                    // FALLBACK –ü–û–ò–°–ö: –∏—â–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø–æ–ª—è—Ö (Title, Description)
                    var matchesFallback = originalKeywords.All(originalKeyword =>
                        (book.Title?.ToLower().Contains(originalKeyword) == true) ||
                        (book.Description?.ToLower().Contains(originalKeyword) == true));

                    var finalMatch = matchesText || matchesTags || matchesFallback;
                    
                    if (matchesText) matchedByText++;
                    if (matchesTags) matchedByTags++;
                    if (matchesFallback) matchedByFallback++;
                    
                    // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                    if (totalChecked <= 3)
                    {
                        _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–∏–≥–∏ {Index}: '{Title}' | matchesText: {MatchText} | matchesTags: {MatchTags} | matchesFallback: {MatchFallback} | –∏—Ç–æ–≥: {Final}", 
                            totalChecked, book.Title?.Substring(0, Math.Min(40, book.Title?.Length ?? 0)), 
                            matchesText, matchesTags, matchesFallback, finalMatch);
                            
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                        for (int i = 0; i < keywordGroups.Count; i++)
                        {
                            var group = keywordGroups[i];
                            var groupMatches = group.Any(searchTerm =>
                                (book.NormalizedTitle?.Contains(searchTerm) == true) ||
                                (book.NormalizedDescription?.Contains(searchTerm) == true));
                            _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ì—Ä—É–ø–ø–∞ {GroupIndex} [{Group}]: {GroupMatches}", 
                                i + 1, string.Join(", ", group), groupMatches);
                                
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                            foreach (var searchTerm in group)
                            {
                                var titleMatch = book.NormalizedTitle?.Contains(searchTerm) == true;
                                var descMatch = book.NormalizedDescription?.Contains(searchTerm) == true;
                                if (titleMatch || descMatch)
                                {
                                    _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: ‚úì –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å '{SearchTerm}': title={TitleMatch}, desc={DescMatch}", 
                                        searchTerm, titleMatch, descMatch);
                                }
                            }
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥–∏ –¥–µ—Ç–∞–ª—å–Ω–æ
                        if (book.Tags?.Any() == true)
                        {
                            _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–µ–≥–∏ –∫–Ω–∏–≥–∏: [{Tags}]", string.Join(", ", book.Tags));
                            foreach (var originalKeyword in originalKeywords)
                            {
                                var tagMatches = book.Tags.Any(tag => tag.ToLower().Contains(originalKeyword));
                                if (tagMatches)
                                {
                                    var matchingTags = book.Tags.Where(tag => tag.ToLower().Contains(originalKeyword)).ToList();
                                    _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: ‚úì –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ç–µ–≥–∞—Ö —Å '{Keyword}': {MatchingTags}", 
                                        originalKeyword, string.Join(", ", matchingTags));
                                }
                            }
                        }

                        // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback-–ø–æ–∏—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ
                        _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Fallback-–ø–æ–∏—Å–∫ –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º –ø–æ–ª—è–º:");
                        foreach (var originalKeyword in originalKeywords)
                        {
                            var titleMatch = book.Title?.ToLower().Contains(originalKeyword) == true;
                            var descMatch = book.Description?.ToLower().Contains(originalKeyword) == true;
                            if (titleMatch || descMatch)
                            {
                                _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: ‚úì –ù–∞–π–¥–µ–Ω–æ fallback-—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å '{Keyword}': title={TitleMatch}, description={DescMatch}", 
                                    originalKeyword, titleMatch, descMatch);
                            }
                        }
                    }

                    return finalMatch;
                }).ToList();
                
                _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–Ω–∏–≥: {TotalChecked}, –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Ç–µ–∫—Å—Ç—É: {MatchedByText}, –ø–æ —Ç–µ–≥–∞–º: {MatchedByTags}, fallback-–ø–æ–∏—Å–∫: {MatchedByFallback}", 
                    totalChecked, matchedByText, matchedByTags, matchedByFallback);

                _logger.LogInformation("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –æ—Å—Ç–∞–ª–æ—Å—å {Count} –∑–∞–ø–∏—Å–µ–π", allBooks.Count);
            }
            else
            {
                // –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ SQL
                allBooks = await query
                    .Skip((page - 1) * pageSize)
                    .Take(pageSize)
                    .AsNoTracking()
                    .ToListAsync(cancellationToken);

                _logger.LogInformation("–ó–∞–≥—Ä—É–∂–µ–Ω–æ {Count} –∑–∞–ø–∏—Å–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –≤ SQL", allBooks.Count);
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–Ω–æ –Ω–µ –≤ DEBUG —Ä–µ–∂–∏–º–µ)
            var totalCount = allBooks.Count;
            List<RegularBaseBook> books;
            
            if (keywords.Any() && !isDebugMode)
            {
                // –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                var countQuery = booksContext.BooksInfo.AsQueryable();
                countQuery = countQuery.Where(b => b.EndDate > now);
                
                //if (categoryIds.Any())
                //    countQuery = countQuery.Where(b => categoryIds.Contains(b.CategoryId));
                if (preferences.MinPrice > 0)
                    countQuery = countQuery.Where(b => (decimal)b.Price >= preferences.MinPrice);
                if (preferences.MaxPrice > 0)
                    countQuery = countQuery.Where(b => (decimal)b.Price <= preferences.MaxPrice);
                if (preferences.MinYear > 0)
                    countQuery = countQuery.Where(b => b.YearPublished >= preferences.MinYear);
                if (preferences.MaxYear > 0)
                    countQuery = countQuery.Where(b => b.YearPublished <= preferences.MaxYear);
                /*if (cities.Any())
                {
                    var normalizedCities = cities.Select(c => c.ToLower()).ToList();
                    foreach (var city in normalizedCities)
                        countQuery = countQuery.Where(b => EF.Functions.ILike(b.City, $"%{city}%"));
                }*/
                
                // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
                totalCount = Math.Min(await countQuery.CountAsync(cancellationToken), 1000);
                
                books = allBooks
                    .Skip((page - 1) * pageSize)
                    .Take(pageSize)
                    .ToList();
            }
            else
            {
                books = allBooks;
                
                // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í DEBUG —Ä–µ–∂–∏–º–µ –∏–ª–∏ –±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π count
                if (isDebugMode)
                {
                    _logger.LogInformation("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: DEBUG —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑–∞–Ω—ã {Count} –ª–æ—Ç–æ–≤ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", books.Count);
                    totalCount = totalActiveCount; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤
                }
            }

            _logger.LogInformation("–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {BooksCount} –∫–Ω–∏–≥ –∏–∑ {TotalCount} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö", books.Count, totalCount);

            return new LotsSearchResult
            {
                Books = books,
                TotalCount = totalCount,
                Page = page,
                PageSize = pageSize
            };
        }

        private async Task<string> FormatLotsMessageAsync(LotsSearchResult result, int page, int pageSize, UserNotificationPreference preferences, CancellationToken cancellationToken)
        {
            _logger.LogInformation("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /lots: {Count} –∫–Ω–∏–≥ –∏–∑ {TotalCount}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {Page}/{TotalPages}",
               result.Books.Count, result.TotalCount, page, (int)Math.Ceiling((double)result.TotalCount / pageSize));
               
            var message = new StringBuilder();

            var totalPages = (int)Math.Ceiling((double)result.TotalCount / pageSize);

            message.AppendLine("üìö <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º</b>");
            message.AppendLine();
            message.AppendLine($"üìä –ù–∞–π–¥–µ–Ω–æ: {result.TotalCount} –ª–æ—Ç–æ–≤");
            message.AppendLine($"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}/{totalPages}");
            message.AppendLine();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
            if (!string.IsNullOrEmpty(preferences.Keywords))
            {
                message.AppendLine($"üîç <b>–ü–æ –∫—Ä–∏—Ç–µ—Ä–∏—é:</b> {preferences.Keywords}");
                message.AppendLine();
            }

            int index = (page - 1) * pageSize + 1;
            foreach (var book in result.Books)
            {
                var timeLeft = book.EndDate - DateTime.UtcNow;
                var endDateStr = book.EndDate.ToString("dd.MM.yyyy HH:mm");

                // –£–ü–†–û–©–ï–ù–ù–´–ô –§–û–†–ú–ê–¢: –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞, –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è, —Å—Å—ã–ª–∫–∞
                message.AppendLine($"<b>{index}. {book.Title}</b>");
                message.AppendLine($"‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {endDateStr}");
                message.AppendLine($"üîó <a href=\"https://meshok.net/item/{book.Id}\">–û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç ‚Ññ{book.Id}</a>");
                 
                 index++;
             }

             // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
             if (totalPages > 1)
             {
                 message.AppendLine("üìñ <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è:</b>");
                 if (page > 1)
                     message.AppendLine($"  <code>/lots {page - 1}</code> - –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞");
                 if (page < totalPages)
                     message.AppendLine($"  <code>/lots {page + 1}</code> - —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞");
                 message.AppendLine($"  <code>/lots [–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã]</code> - –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É");
                 message.AppendLine();
             }

             message.AppendLine("‚öôÔ∏è <code>/settings</code> - –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞");
             
             // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
             string resultMessage = message.ToString();
             _logger.LogInformation("–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: {MessageLength} —Å–∏–º–≤–æ–ª–æ–≤", resultMessage.Length);
             
             // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram - –ø—Ä–∏–º–µ—Ä–Ω–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
             if (resultMessage.Length > 4000)
             {
                 _logger.LogWarning("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({Length} —Å–∏–º–≤–æ–ª–æ–≤). –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.", resultMessage.Length);
                 
                 // –°–æ–∑–¥–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                 var shortMessage = new StringBuilder();
                 shortMessage.AppendLine("üìö <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º</b>");
                 shortMessage.AppendLine();
                 shortMessage.AppendLine($"üìä –ù–∞–π–¥–µ–Ω–æ: {result.TotalCount} –ª–æ—Ç–æ–≤");
                 shortMessage.AppendLine($"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}/{totalPages}");
                 shortMessage.AppendLine();
                 
                 // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ª–æ—Ç –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
                 if (result.Books.Any())
                 {
                     var book = result.Books.First();
                     shortMessage.AppendLine("<b>–ü—Ä–∏–º–µ—Ä –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞:</b>");
                     shortMessage.AppendLine($"<b>1. {book.Title}</b>");
                     shortMessage.AppendLine($"üí∞ –¶–µ–Ω–∞: <b>{book.Price:N0} ‚ÇΩ</b>");
                     shortMessage.AppendLine($"üèôÔ∏è –ì–æ—Ä–æ–¥: {book.City}");
                     if (book.YearPublished.HasValue)
                         shortMessage.AppendLine($"üìÖ –ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è: {book.YearPublished}");
                     shortMessage.AppendLine($"üîó <a href=\"https://meshok.net/item/{book.Id}\">–û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç –Ω–∞ Meshok.net</a>");
                     shortMessage.AppendLine();
                 }
                 
                 shortMessage.AppendLine("‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</b> –Ω–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.");
                 shortMessage.AppendLine("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É—Ç–æ—á–Ω–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.");
                 shortMessage.AppendLine();
                 shortMessage.AppendLine("‚öôÔ∏è <code>/settings</code> - –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞");
                 
                 resultMessage = shortMessage.ToString();
                 _logger.LogInformation("–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: {MessageLength} —Å–∏–º–≤–æ–ª–æ–≤", resultMessage.Length);
             }

             return resultMessage;
         }

        private async Task<DirectAuthResult> RegisterUserDirectlyAsync(string email, string password, string telegramId, CancellationToken cancellationToken)
        {
            using var scope = _scopeFactory.CreateScope();
            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
            var context = scope.ServiceProvider.GetRequiredService<UsersDbContext>();

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email
                if (string.IsNullOrWhiteSpace(email) || !email.Contains("@"))
                {
                    return DirectAuthResult.Fail("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
                if (string.IsNullOrWhiteSpace(password) || password.Length < 6)
                {
                    return DirectAuthResult.Fail("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
                var existingUser = await userManager.FindByEmailAsync(email);
                if (existingUser != null)
                {
                    return DirectAuthResult.Fail("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —ç—Ç–æ—Ç Telegram ID –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
                var userWithTelegramId = await context.Users
                    .FirstOrDefaultAsync(u => u.TelegramId == telegramId, cancellationToken);
                if (userWithTelegramId != null)
                {
                    return DirectAuthResult.Fail($"–≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ {userWithTelegramId.Email}");
                }

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                var newUser = new ApplicationUser
                {
                    UserName = email,
                    Email = email,
                    EmailConfirmed = true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email –¥–ª—è Telegram —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    TelegramId = telegramId,
                    Role = "User",
                    CreatedAt = DateTime.UtcNow
                };

                var result = await userManager.CreateAsync(newUser, password);

                if (result.Succeeded)
                {
                    _logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {Email} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram ID {TelegramId}", email, telegramId);
                    return DirectAuthResult.Success(newUser);
                }
                else
                {
                    var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                    return DirectAuthResult.Fail($"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {errors}");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {Email} —á–µ—Ä–µ–∑ Telegram", email);
                return DirectAuthResult.Fail("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            }
        }

        private async Task<DirectAuthResult> LoginUserDirectlyAsync(string email, string password, string telegramId, CancellationToken cancellationToken)
        {
            using var scope = _scopeFactory.CreateScope();
            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
            var signInManager = scope.ServiceProvider.GetRequiredService<SignInManager<ApplicationUser>>();
            var context = scope.ServiceProvider.GetRequiredService<UsersDbContext>();

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email
                if (string.IsNullOrWhiteSpace(email) || !email.Contains("@"))
                {
                    return DirectAuthResult.Fail("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å");
                }

                // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                var user = await userManager.FindByEmailAsync(email);
                if (user == null)
                {
                    return DirectAuthResult.Fail("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
                var passwordCheck = await signInManager.CheckPasswordSignInAsync(user, password, false);
                if (!passwordCheck.Succeeded)
                {
                    return DirectAuthResult.Fail("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –∫ –¥—Ä—É–≥–æ–º—É Telegram
                if (!string.IsNullOrEmpty(user.TelegramId) && user.TelegramId != telegramId)
                {
                    return DirectAuthResult.Fail("–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —ç—Ç–æ—Ç Telegram ID –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
                if (string.IsNullOrEmpty(user.TelegramId))
                {
                    var userWithTelegramId = await context.Users
                        .FirstOrDefaultAsync(u => u.TelegramId == telegramId, cancellationToken);
                    if (userWithTelegramId != null)
                    {
                        return DirectAuthResult.Fail($"–≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ {userWithTelegramId.Email}");
                    }

                    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID
                    user.TelegramId = telegramId;
                    await userManager.UpdateAsync(user);
                }

                _logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {Email} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª —á–µ—Ä–µ–∑ Telegram ID {TelegramId}", email, telegramId);
                return DirectAuthResult.Success(user);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {Email} —á–µ—Ä–µ–∑ Telegram", email);
                return DirectAuthResult.Fail("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            }
        }

        // –ú–µ—Ç–æ–¥—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ TelegramBotServiceExtended.cs
        
        // ------------------- –ü–û–ú–û–ì–ê–Æ–©–ò–ô –ú–ï–¢–û–î: –¥–µ—Ç–µ–∫—Ç —è–∑—ã–∫–∞ + —Å—Ç–µ–º–º–∏–Ω–≥ -----------        
        private string PreprocessText(string text, out string detectedLanguage)
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ—Ç–µ–∫—Ç–æ—Ä
            detectedLanguage = DetectLanguage(text);
            if (detectedLanguage == "bul" || detectedLanguage == "ukr" || detectedLanguage == "mkd")
                detectedLanguage = "rus";

            if (!_stemmers.ContainsKey(detectedLanguage))
            {
                throw new NotSupportedException($"Language {detectedLanguage} is not supported.");
            }

            var stemmer = _stemmers[detectedLanguage];
            // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É —Å –ø–æ–º–æ—â—å—é ToLowerInvariant –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
            var normalizedText = Regex.Replace(text.ToLowerInvariant(), @"\p{P}", " ");
            var words = normalizedText.Split(' ', StringSplitOptions.RemoveEmptyEntries)
                                      .Select(word => stemmer.Stem(word));
            return string.Join(" ", words);
        }

        private string DetectLanguage(string text)
        {
            return _languageDetector.Detect(text);
        }

        // ================= –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –ú–ï–¢–û–î–´ –ü–û–ò–°–ö–ê –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =================

        /// <summary>
        /// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–Ω–∏–≥ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        /// </summary>
        private List<RegularBaseBook> FilterBooksByPreference(List<RegularBaseBook> books, UserNotificationPreference preference)
        {
            var filteredBooks = books.AsEnumerable();

            // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            var categoryIds = preference.GetCategoryIdsList();
            if (categoryIds.Any())
            {
                filteredBooks = filteredBooks.Where(b => categoryIds.Contains(b.CategoryId));
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ - –õ–û–ì–ò–ö–ê AND –¥–ª—è —Ñ—Ä–∞–∑)
            var keywords = preference.GetKeywordsList();
            if (keywords.Any())
            {
                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –æ–¥–Ω—É —Ñ—Ä–∞–∑—É –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
                var fullPhrase = string.Join(" ", keywords);
                var allWords = fullPhrase.Split(new char[] { ' ', ',', ';' }, StringSplitOptions.RemoveEmptyEntries)
                    .Select(w => w.Trim().ToLower())
                    .Where(w => !string.IsNullOrEmpty(w))
                    .Distinct()
                    .ToList();

                _logger.LogInformation("–ü–æ–∏—Å–∫ –ø–æ —Ñ—Ä–∞–∑–µ: '{FullPhrase}' -> —Å–ª–æ–≤–∞: [{Words}]", 
                    fullPhrase, string.Join(", ", allWords));

                // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ (—Å—Ç–µ–º–º–∏–Ω–≥ + —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
                var searchVariants = new List<List<string>>();
                
                foreach (var word in allWords)
                {
                    var wordVariants = new List<string> { word }; // –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ
                    
                    try
                    {
                        // –°—Ç–µ–º–º–∏–Ω–≥
                        string detectedLanguage;
                        var stemmedWord = PreprocessText(word, out detectedLanguage);
                        if (!string.IsNullOrEmpty(stemmedWord) && stemmedWord != word)
                        {
                            wordVariants.Add(stemmedWord.ToLower());
                        }
                        
                        // –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏–π (–ø–µ—Ä–≤—ã–µ 4-6 —Å–∏–º–≤–æ–ª–æ–≤)
                        if (word.Length >= 4)
                        {
                            var partialWord = word.Substring(0, Math.Min(word.Length - 1, 6));
                            if (!wordVariants.Contains(partialWord))
                            {
                                wordVariants.Add(partialWord);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogWarning(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–æ–≤–∞ '{Word}', –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫", word);
                    }
                    
                    searchVariants.Add(wordVariants.Distinct().ToList());
                }

                // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–Ω–∏–≥–∏: –í–°–ï —Å–ª–æ–≤–∞ —Ñ—Ä–∞–∑—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏—Å—å (–ª–æ–≥–∏–∫–∞ AND)
                filteredBooks = filteredBooks.Where(book =>
                {
                    // –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫: –í–°–ï —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏—Å—å –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—è—Ö
                    var matchesText = searchVariants.All(wordVariants =>
                        wordVariants.Any(variant =>
                            (book.NormalizedTitle?.Contains(variant) == true) ||
                            (book.NormalizedDescription?.Contains(variant) == true)));

                    // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º: –í–°–ï –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏—Å—å –≤ —Ç–µ–≥–∞—Ö
                    var matchesTags = allWords.All(word =>
                        book.Tags?.Any(tag =>
                            tag.ToLower().Contains(word)) == true);

                    // Fallback –ø–æ–∏—Å–∫: –í–°–ï —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏—Å—å –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø–æ–ª—è—Ö
                    var matchesFallback = allWords.All(word =>
                        (book.Title?.ToLower().Contains(word) == true) ||
                        (book.Description?.ToLower().Contains(word) == true));

                    var result = matchesText || matchesTags || matchesFallback;
                    
                    if (result)
                    {
                        _logger.LogDebug("–ö–Ω–∏–≥–∞ '{BookTitle}' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ—Ä–∞–∑–µ '{FullPhrase}'", 
                            book.Title, fullPhrase);
                    }

                    return result;
                });
            }

            return filteredBooks.OrderBy(b => b.EndDate).ToList();
        }

        /// <summary>
        /// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        /// </summary>
        public async Task<List<RegularBaseBook>> FindMatchingBooksAsync(List<UserNotificationPreference> preferences, List<int> bookIds = null, CancellationToken cancellationToken = default)
        {
            if (!preferences?.Any() == true)
            {
                _logger.LogWarning("FindMatchingBooksAsync: –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞");
                return new List<RegularBaseBook>();
            }

            using var scope = _scopeFactory.CreateScope();
            var booksContext = scope.ServiceProvider.GetRequiredService<BooksDbContext>();

            _logger.LogInformation("–ù–∞—á–∏–Ω–∞–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–∏–≥ –¥–ª—è {PreferencesCount} –Ω–∞—Å—Ç—Ä–æ–µ–∫", preferences.Count);

            // –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            var query = booksContext.BooksInfo.Include(b => b.Category).AsQueryable();

            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ ID –∫–Ω–∏–≥
            if (bookIds?.Any() == true)
            {
                query = query.Where(b => bookIds.Contains(b.Id));
                _logger.LogInformation("–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ {BookCount} –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∫–Ω–∏–≥–∞–º–∏", bookIds.Count);
            }
            else
            {
                // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–∏
                var now = DateTime.UtcNow;
                query = query.Where(b => b.EndDate > now);
                _logger.LogInformation("–ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ (EndDate > {Now})", now);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–Ω–∏–≥–∏
            var allBooks = await query.AsNoTracking().ToListAsync(cancellationToken);
            _logger.LogInformation("–ó–∞–≥—Ä—É–∂–µ–Ω–æ {BookCount} –∫–Ω–∏–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", allBooks.Count);

            var matchingBooks = new List<RegularBaseBook>();

            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞–∂–¥–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
            foreach (var preference in preferences)
            {
                _logger.LogInformation("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É ID {PreferenceId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: '{Keywords}'", 
                    preference.Id, preference.UserId, preference.Keywords);

                var booksForPreference = FilterBooksByPreference(allBooks, preference);
                _logger.LogInformation("–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {PreferenceId} –Ω–∞–π–¥–µ–Ω–æ {Count} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–Ω–∏–≥", 
                    preference.Id, booksForPreference.Count);

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                foreach (var book in booksForPreference)
                {
                    if (!matchingBooks.Any(mb => mb.Id == book.Id))
                    {
                        matchingBooks.Add(book);
                    }
                }
            }

            _logger.LogInformation("–ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {Count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –ø–æ –≤—Å–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", matchingBooks.Count);
            return matchingBooks.OrderBy(b => b.EndDate).ToList();
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥–∞—Ö (–µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞)
        /// </summary>
        public async Task<int> ProcessNewBookNotificationsAsync(List<int> newBookIds, CancellationToken cancellationToken = default)
        {
            if (!newBookIds?.Any() == true)
            {
                _logger.LogWarning("ProcessNewBookNotificationsAsync: –°–ø–∏—Å–æ–∫ ID –∫–Ω–∏–≥ –ø—É—Å—Ç");
                return 0;
            }

            _logger.LogInformation("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {Count} –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥", newBookIds.Count);

            using var scope = _scopeFactory.CreateScope();
            var usersContext = scope.ServiceProvider.GetRequiredService<UsersDbContext>();

            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            var preferences = await usersContext.UserNotificationPreferences
                .Where(np => np.IsEnabled && np.DeliveryMethod == NotificationDeliveryMethod.Telegram) // 4 = Telegram
                .ToListAsync(cancellationToken);

            if (!preferences.Any())
            {
                _logger.LogInformation("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
                return 0;
            }

            _logger.LogInformation("–ù–∞–π–¥–µ–Ω–æ {Count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", preferences.Count);

            // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–Ω–∏–≥–∏
            var matchingBooks = await FindMatchingBooksAsync(preferences, newBookIds, cancellationToken);

            if (!matchingBooks.Any())
            {
                _logger.LogInformation("–°—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º");
                return 0;
            }

            _logger.LogInformation("–ù–∞–π–¥–µ–Ω–æ {Count} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–Ω–∏–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", matchingBooks.Count);

            int notificationsSent = 0;

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            var userNotifications = new Dictionary<string, List<(UserNotificationPreference preference, List<RegularBaseBook> books)>>();

            foreach (var preference in preferences)
            {
                var booksForPreference = FilterBooksByPreference(matchingBooks, preference);
                if (booksForPreference.Any())
                {
                    var userId = preference.UserId;
                    if (!userNotifications.ContainsKey(userId))
                    {
                        userNotifications[userId] = new List<(UserNotificationPreference, List<RegularBaseBook>)>();
                    }
                    userNotifications[userId].Add((preference, booksForPreference));
                }
            }

            _logger.LogInformation("–°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {UserCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", userNotifications.Count);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            foreach (var userNotification in userNotifications)
            {
                var userId = userNotification.Key;
                var preferencesWithBooks = userNotification.Value;
                
                try
                {
                    var user = await usersContext.Users.FirstOrDefaultAsync(u => u.Id == userId, cancellationToken);
                    if (user?.TelegramId == null)
                    {
                        _logger.LogWarning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ Telegram ID", userId);
                        continue;
                    }

                    await SendNewBooksNotificationAsync(user.TelegramId, preferencesWithBooks, cancellationToken);
                    notificationsSent++;

                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    foreach (var item in preferencesWithBooks)
                    {
                        item.preference.LastNotificationSent = DateTime.UtcNow;
                    }
                    await usersContext.SaveChangesAsync(cancellationToken);

                    _logger.LogInformation("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {TelegramId} ({UserId})", user.TelegramId, userId);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {UserId}", userId);
                }
            }

            _logger.LogInformation("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {Count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", notificationsSent);
            return notificationsSent;
        }

        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏)
        /// </summary>
        public async Task<int> TestNotificationsAsync(int limitBooks, bool showBookIds = false, CancellationToken cancellationToken = default)
        {
            _logger.LogInformation("–¢–ï–°–¢: –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ª–∏–º–∏—Ç–æ–º {Limit} –∫–Ω–∏–≥", limitBooks);

            using var scope = _scopeFactory.CreateScope();
            var booksContext = scope.ServiceProvider.GetRequiredService<BooksDbContext>();
            var usersContext = scope.ServiceProvider.GetRequiredService<UsersDbContext>();

            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã
            var now = DateTime.UtcNow;
            var activeBookIds = await booksContext.BooksInfo
                .Where(b => b.EndDate > now)
                .OrderBy(b => b.EndDate)
                .Take(limitBooks)
                .Select(b => b.Id)
                .ToListAsync(cancellationToken);

            _logger.LogInformation("–¢–ï–°–¢: –ù–∞–π–¥–µ–Ω–æ {Count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", activeBookIds.Count);

            if (!activeBookIds.Any())
            {
                _logger.LogWarning("–¢–ï–°–¢: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
                return 0;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            var preferences = await usersContext.UserNotificationPreferences
                .Where(np => np.IsEnabled && np.DeliveryMethod == NotificationDeliveryMethod.Telegram) // 4 = Telegram
                .ToListAsync(cancellationToken);

            _logger.LogInformation("–¢–ï–°–¢: –ù–∞–π–¥–µ–Ω–æ {Count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", preferences.Count);

            if (!preferences.Any())
            {
                _logger.LogWarning("–¢–ï–°–¢: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
                return 0;
            }

            // –í–ê–ñ–ù–û: –î–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–∞—Å—Ç–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            return await ProcessNewBookNotificationsAsync(activeBookIds, cancellationToken);
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–£–ü–†–û–©–ï–ù–ù–´–ô –§–û–†–ú–ê–¢)
        /// </summary>
        private async Task SendNewBooksNotificationAsync(string telegramId, List<(UserNotificationPreference preference, List<RegularBaseBook> books)> preferencesWithBooks, CancellationToken cancellationToken)
        {
            int totalBooks = preferencesWithBooks.Sum(p => p.books.Count);
            
            _logger.LogInformation("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {TelegramId}: {PreferencesCount} –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤, {TotalBooks} –∫–Ω–∏–≥", 
                telegramId, preferencesWithBooks.Count, totalBooks);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            var message = new StringBuilder();
            message.AppendLine("üîî <b>–ù–æ–≤—ã–µ –ª–æ—Ç—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º!</b>");
            message.AppendLine();
            message.AppendLine($"üìä –ù–∞–π–¥–µ–Ω–æ: {totalBooks} –Ω–æ–≤—ã—Ö –ª–æ—Ç–æ–≤");
            message.AppendLine();

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            foreach (var item in preferencesWithBooks)
            {
                var preference = item.preference;
                var books = item.books;

                if (!string.IsNullOrEmpty(preference.Keywords))
                {
                    message.AppendLine($"üîç <b>–ü–æ –∑–∞–ø—Ä–æ—Å—É:</b> {preference.Keywords}");
                }
                else
                {
                    message.AppendLine($"üîç <b>–ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º</b>");
                }

                foreach (var book in books)
                {
                    message.AppendLine($"üìö <b>{book.Title}</b>");
                    message.AppendLine($"üîó <a href=\"https://meshok.net/item/{book.Id}\">–û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç ‚Ññ{book.Id}</a>");
                    message.AppendLine();
                }
                
                message.AppendLine("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
                message.AppendLine();
            }

            message.AppendLine("‚öôÔ∏è <code>/settings</code> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏");
            message.AppendLine("üìã <code>/lots</code> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ª–æ—Ç—ã");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            await SendLongMessageAsync(telegramId, message.ToString(), cancellationToken);
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        /// </summary>
        private async Task SendLongMessageAsync(string telegramId, string message, CancellationToken cancellationToken)
        {
            const int maxMessageLength = 4000; // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –æ—Ç –ª–∏–º–∏—Ç–∞ Telegram –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤
            
            if (message.Length <= maxMessageLength)
            {
                // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω –±–ª–æ–∫
                await _telegramService.SendNotificationAsync(telegramId, message, cancellationToken);
                return;
            }

            _logger.LogInformation("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({Length} —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏", message.Length);

            // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
            var lines = message.Split('\n');
            var currentMessage = new StringBuilder();
            int partNumber = 1;
            int totalParts = (int)Math.Ceiling((double)message.Length / maxMessageLength);

            foreach (var line in lines)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –µ—â–µ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
                if (currentMessage.Length + line.Length + 1 > maxMessageLength && currentMessage.Length > 0)
                {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
                    var partMessage = currentMessage.ToString();
                    if (totalParts > 1)
                    {
                        partMessage += $"\n\nüìÑ <i>–ß–∞—Å—Ç—å {partNumber}/{totalParts}</i>";
                    }
                    
                    await _telegramService.SendNotificationAsync(telegramId, partMessage, cancellationToken);
                    
                    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å
                    partNumber++;
                    currentMessage.Clear();
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
                    await Task.Delay(300, cancellationToken);
                }
                
                currentMessage.AppendLine(line);
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
            if (currentMessage.Length > 0)
            {
                var partMessage = currentMessage.ToString();
                if (totalParts > 1)
                {
                    partMessage += $"\n\nüìÑ <i>–ß–∞—Å—Ç—å {partNumber}/{totalParts} (–ø–æ—Å–ª–µ–¥–Ω—è—è)</i>";
                }
                
                await _telegramService.SendNotificationAsync(telegramId, partMessage, cancellationToken);
            }
        }
    }

    public class DirectAuthResult
    {
        public bool IsSuccess { get; private set; }
        public string ErrorMessage { get; private set; }
        public ApplicationUser User { get; private set; }

        private DirectAuthResult(bool isSuccess, string errorMessage, ApplicationUser user)
        {
            IsSuccess = isSuccess;
            ErrorMessage = errorMessage;
            User = user;
        }

        public static DirectAuthResult Success(ApplicationUser user)
        {
            return new DirectAuthResult(true, null, user);
        }

        public static DirectAuthResult Fail(string errorMessage)
        {
            return new DirectAuthResult(false, errorMessage, null);
        }
    }

    public class LotsSearchResult
    {
        public List<RegularBaseBook> Books { get; set; } = new();
        public int TotalCount { get; set; }
        public int Page { get; set; }
        public int PageSize { get; set; }
    }
}

