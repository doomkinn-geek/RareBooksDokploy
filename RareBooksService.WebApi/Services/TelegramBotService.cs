using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using RareBooksService.Common.Models;
using RareBooksService.Common.Models.Telegram;
using RareBooksService.Data;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using Iveonik.Stemmers;
using LanguageDetection;

namespace RareBooksService.WebApi.Services
{
    public interface ITelegramBotService
    {
        Task ProcessUpdateAsync(TelegramUpdate update, CancellationToken cancellationToken = default);
    }

    public partial class TelegramBotService : ITelegramBotService
    {
        private readonly ITelegramNotificationService _telegramService;
        private readonly IServiceScopeFactory _scopeFactory;
        private readonly ILogger<TelegramBotService> _logger;
        private readonly ITelegramLinkService _linkService;
        private readonly Dictionary<string, IStemmer> _stemmers;
        private static readonly LanguageDetector _languageDetector;

        // –°–æ–∑–¥–∞—ë–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —è–∑—ã–∫–∞ –æ–¥–∏–Ω —Ä–∞–∑
        static TelegramBotService()
        {
            _languageDetector = new LanguageDetector();
            _languageDetector.AddAllLanguages();
        }

        public TelegramBotService(
            ITelegramNotificationService telegramService,
            IServiceScopeFactory scopeFactory,
            ILogger<TelegramBotService> logger,
            ITelegramLinkService linkService)
        {
            _telegramService = telegramService ?? throw new ArgumentNullException(nameof(telegramService));
            _scopeFactory = scopeFactory ?? throw new ArgumentNullException(nameof(scopeFactory));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _linkService = linkService ?? throw new ArgumentNullException(nameof(linkService));
            
            _stemmers = new Dictionary<string, IStemmer>
            {
                { "rus", new RussianStemmer() },
                { "eng", new EnglishStemmer() },
                { "fra", new FrenchStemmer() },
                { "deu", new GermanStemmer() },
                { "ita", new ItalianStemmer() },
                { "fin", new FinnishStemmer() }
            };
        }

        public async Task ProcessUpdateAsync(TelegramUpdate update, CancellationToken cancellationToken = default)
        {
            try
            {
                if (update.Message != null)
                {
                    await ProcessMessageAsync(update.Message, cancellationToken);
                }
                else if (update.CallbackQuery != null)
                {
                    await ProcessCallbackQueryAsync(update.CallbackQuery, cancellationToken);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram: {UpdateId}", update.UpdateId);
            }
        }

        private async Task ProcessMessageAsync(TelegramMessage message, CancellationToken cancellationToken)
        {
            var chatId = message.Chat.Id.ToString();
            var telegramId = message.From.Id.ToString();
            var messageText = message.Text?.Trim();

            _logger.LogInformation("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TelegramId}: {Message}", telegramId, messageText);

            if (string.IsNullOrEmpty(messageText))
                return;

            // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var userState = await _telegramService.GetUserStateAsync(telegramId, cancellationToken);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (messageText.StartsWith("/"))
            {
                await ProcessCommandAsync(chatId, telegramId, messageText, cancellationToken);
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
            if (userState != null && userState.State != TelegramBotStates.None)
            {
                await ProcessUserStateAsync(chatId, telegramId, messageText, userState, cancellationToken);
                return;
            }

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
            await ShowMainMenuAsync(chatId, telegramId, cancellationToken);
        }

        private async Task ProcessCommandAsync(string chatId, string telegramId, string command, CancellationToken cancellationToken)
        {
            _logger.LogInformation("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É: '{Command}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TelegramId}", command, telegramId);
            
            // –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            var commandParts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            var baseCommand = commandParts[0].ToLower();
            
            switch (baseCommand)
            {
                case "/start":
                    await HandleStartCommandAsync(chatId, telegramId, cancellationToken);
                    break;
                case "/help":
                    await HandleHelpCommandAsync(chatId, cancellationToken);
                    break;
                case "/settings":
                    await HandleSettingsCommandAsync(chatId, telegramId, cancellationToken);
                    break;
                case "/list":
                    await HandleListCommandAsync(chatId, telegramId, cancellationToken);
                    break;
                case "/cancel":
                    await HandleCancelCommandAsync(chatId, telegramId, cancellationToken);
                    break;
                case "/link":
                    await HandleLinkCommandAsync(chatId, telegramId, command, cancellationToken);
                    break;
                case "/register":
                    await HandleRegisterCommandAsync(chatId, telegramId, command, cancellationToken);
                    break;
                case "/login":
                    await HandleLoginCommandAsync(chatId, telegramId, command, cancellationToken);
                    break;
                case "/lots":
                    await HandleLotsCommandAsync(chatId, telegramId, command, cancellationToken);
                    break;
                default:
                    _logger.LogWarning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{Command}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TelegramId}", command, telegramId);
                    await _telegramService.SendMessageWithKeyboardAsync(chatId, 
                        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", 
                        cancellationToken: cancellationToken);
                    break;
            }
        }

        private async Task HandleStartCommandAsync(string chatId, string telegramId, CancellationToken cancellationToken)
        {
            var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);

            var welcomeMessage = new StringBuilder();
            welcomeMessage.AppendLine("ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–¥–∫–∏—Ö –∫–Ω–∏–≥–∞—Ö!</b>");
            welcomeMessage.AppendLine();

            if (user == null)
            {
                welcomeMessage.AppendLine("üìã <b>–í–∞—à Telegram ID:</b> <code>" + telegramId + "</code>");
                welcomeMessage.AppendLine();
                welcomeMessage.AppendLine("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:");
                welcomeMessage.AppendLine("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID –≤—ã—à–µ");
                welcomeMessage.AppendLine("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –≤ —Ä–∞–∑–¥–µ–ª \"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\"");
                welcomeMessage.AppendLine("3. –ü—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à Telegram ID –∫ –∞–∫–∫–∞—É–Ω—Ç—É");
                welcomeMessage.AppendLine("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∫–Ω–∏–≥");
            }
            else
            {
                welcomeMessage.AppendLine($"üëã –ü—Ä–∏–≤–µ—Ç, {user.UserName ?? "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}!");
                welcomeMessage.AppendLine();
                welcomeMessage.AppendLine("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.");
                welcomeMessage.AppendLine("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:");
                
                var keyboard = new TelegramInlineKeyboardMarkup(); // TODO: Implement CreateMainMenuKeyboard
                await _telegramService.SendMessageWithKeyboardAsync(chatId, welcomeMessage.ToString(), keyboard, cancellationToken);
                return;
            }

            var helpKeyboard = new TelegramInlineKeyboardMarkup();
            helpKeyboard.InlineKeyboard.Add(new List<TelegramInlineKeyboardButton>
            {
                new TelegramInlineKeyboardButton 
                { 
                    Text = "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", 
                    CallbackData = TelegramCallbacks.Help 
                }
            });

            await _telegramService.SendMessageWithKeyboardAsync(chatId, welcomeMessage.ToString(), helpKeyboard, cancellationToken);
        }

        private async Task HandleHelpCommandAsync(string chatId, CancellationToken cancellationToken)
        {
            var helpMessage = new StringBuilder();
            helpMessage.AppendLine("üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞</b>");
            helpMessage.AppendLine();
            helpMessage.AppendLine("üîë <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥:</b>");
            helpMessage.AppendLine("/register EMAIL –ü–ê–†–û–õ–¨ - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç");
            helpMessage.AppendLine("/login EMAIL –ü–ê–†–û–õ–¨ - –í–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç");
            helpMessage.AppendLine("/link –¢–û–ö–ï–ù - –ü—Ä–∏–≤—è–∑–∫–∞ —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω —Å —Å–∞–π—Ç–∞");
            helpMessage.AppendLine();
            helpMessage.AppendLine("üîß <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>");
            helpMessage.AppendLine("/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ ID");
            helpMessage.AppendLine("/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É");
            helpMessage.AppendLine("/settings - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
            helpMessage.AppendLine("/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
            helpMessage.AppendLine("/lots - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º");
            helpMessage.AppendLine("/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é");
            helpMessage.AppendLine();
            helpMessage.AppendLine("üöÄ <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>");
            helpMessage.AppendLine("1. <code>/register email@example.com –ø–∞—Ä–æ–ª—å</code>");
            helpMessage.AppendLine("2. <code>/settings</code> - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
            helpMessage.AppendLine("3. <code>/lots</code> - —Å–º–æ—Ç—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã");
            helpMessage.AppendLine("4. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥–∞—Ö!");
            helpMessage.AppendLine();
            helpMessage.AppendLine("üìö <b>–ü–æ–∏—Å–∫ –ª–æ—Ç–æ–≤:</b>");
            helpMessage.AppendLine("‚Ä¢ <code>/lots</code> - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã (—Å—Ç—Ä. 1)");
            helpMessage.AppendLine("‚Ä¢ <code>/lots 2</code> - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É 2");
            helpMessage.AppendLine("‚Ä¢ –õ–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è –ø–æ –≤–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º");
            helpMessage.AppendLine();
            helpMessage.AppendLine("üìù <b>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±:</b>");
            helpMessage.AppendLine("‚Ä¢ –ó–∞–π–¥–∏—Ç–µ –Ω–∞ rare-books.ru");
            helpMessage.AppendLine("‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ \"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\"");
            helpMessage.AppendLine("‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link");

            await _telegramService.SendNotificationAsync(chatId, helpMessage.ToString(), cancellationToken);
        }

        private async Task HandleSettingsCommandAsync(string chatId, string telegramId, CancellationToken cancellationToken)
        {
            var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
            if (user == null)
            {
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.", 
                    cancellationToken);
                return;
            }

            await ShowSettingsMenuAsync(chatId, telegramId, cancellationToken);
        }

        private async Task HandleListCommandAsync(string chatId, string telegramId, CancellationToken cancellationToken)
        {
            var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
            if (user == null)
            {
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–∏—Å—Ç–µ–º–µ.", 
                    cancellationToken);
                return;
            }

            var preferences = await _telegramService.GetUserNotificationPreferencesAsync(user.Id, cancellationToken);
            
            if (!preferences.Any())
            {
                await _telegramService.SendMessageWithKeyboardAsync(chatId, 
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", 
                    new TelegramInlineKeyboardMarkup(), // TODO: Implement CreateCreateNotificationKeyboard 
                    cancellationToken);
                return;
            }

            var listMessage = new StringBuilder();
            listMessage.AppendLine("üìã <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>");
            listMessage.AppendLine();

            foreach (var preference in preferences.Take(10)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
            {
                var status = preference.IsEnabled ? "‚úÖ" : "‚ùå";
                var keywords = string.IsNullOrEmpty(preference.Keywords) 
                    ? "–ù–µ –∑–∞–¥–∞–Ω—ã" 
                    : preference.Keywords.Length > 30 
                        ? preference.Keywords.Substring(0, 30) + "..." 
                        : preference.Keywords;

                listMessage.AppendLine($"{status} <b>ID {preference.Id}</b>");
                listMessage.AppendLine($"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}");
                listMessage.AppendLine($"   –ß–∞—Å—Ç–æ—Ç–∞: {preference.NotificationFrequencyMinutes} –º–∏–Ω");
                listMessage.AppendLine();
            }

            if (preferences.Count > 10)
            {
                listMessage.AppendLine($"... –∏ –µ—â–µ {preferences.Count - 10} –Ω–∞—Å—Ç—Ä–æ–µ–∫");
                listMessage.AppendLine();
            }

            var keyboard = CreateSettingsListKeyboard(preferences.Take(5).ToList()); // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await _telegramService.SendMessageWithKeyboardAsync(chatId, listMessage.ToString(), keyboard, cancellationToken);
        }

        private async Task HandleCancelCommandAsync(string chatId, string telegramId, CancellationToken cancellationToken)
        {
            await _telegramService.ClearUserStateAsync(telegramId, cancellationToken);
            await _telegramService.SendNotificationAsync(chatId, 
                "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", 
                cancellationToken);
        }

        private async Task ProcessCallbackQueryAsync(TelegramCallbackQuery callbackQuery, CancellationToken cancellationToken)
        {
            var chatId = callbackQuery.Message.Chat.Id.ToString();
            var telegramId = callbackQuery.From.Id.ToString();
            var data = callbackQuery.Data;

            _logger.LogInformation("–ü–æ–ª—É—á–µ–Ω callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TelegramId}: {Data}", telegramId, data);

            await _telegramService.AnswerCallbackQueryAsync(callbackQuery.Id, cancellationToken: cancellationToken);

            if (data == TelegramBotStates.CallbackSettings)
            {
                await ShowSettingsMenuAsync(chatId, telegramId, cancellationToken);
            }
            else if (data == TelegramBotStates.CallbackCreate)
            {
                await StartCreateNotificationAsync(chatId, telegramId, cancellationToken);
            }
            else if (data.StartsWith(TelegramBotStates.CallbackEdit))
            {
                var preferenceId = int.Parse(data.Replace(TelegramBotStates.CallbackEdit, ""));
                await ShowEditNotificationMenuAsync(chatId, telegramId, preferenceId, cancellationToken);
            }
            else if (data.StartsWith(TelegramBotStates.CallbackDelete))
            {
                var preferenceId = int.Parse(data.Replace(TelegramBotStates.CallbackDelete, ""));
                await ShowDeleteConfirmationAsync(chatId, telegramId, preferenceId, cancellationToken);
            }
            else if (data.StartsWith(TelegramBotStates.CallbackDeleteConfirm))
            {
                var preferenceId = int.Parse(data.Replace(TelegramBotStates.CallbackDeleteConfirm, ""));
                await DeleteNotificationAsync(chatId, telegramId, preferenceId, cancellationToken);
            }
            else if (data.StartsWith(TelegramBotStates.CallbackToggle))
            {
                var preferenceId = int.Parse(data.Replace(TelegramBotStates.CallbackToggle, ""));
                await ToggleNotificationAsync(chatId, telegramId, preferenceId, cancellationToken);
            }
            else if (data == TelegramBotStates.CallbackSettings)
            {
                await ShowSettingsMenuAsync(chatId, telegramId, cancellationToken);
            }
            else if (data == TelegramBotStates.CallbackHelp)
            {
                await HandleHelpCommandAsync(chatId, cancellationToken);
            }
            else if (data == TelegramBotStates.CallbackCancel || data == TelegramBotStates.CallbackCancelDelete)
            {
                await _telegramService.ClearUserStateAsync(telegramId, cancellationToken);
                await ShowMainMenuAsync(chatId, telegramId, cancellationToken);
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            else if (data.StartsWith(TelegramBotStates.CallbackEditKeywords))
            {
                var preferenceId = int.Parse(data.Replace(TelegramBotStates.CallbackEditKeywords, ""));
                await StartEditKeywordsAsync(chatId, telegramId, preferenceId, cancellationToken);
            }
            else if (data.StartsWith(TelegramBotStates.CallbackEditPrice))
            {
                var preferenceId = int.Parse(data.Replace(TelegramBotStates.CallbackEditPrice, ""));
                await StartEditPriceAsync(chatId, telegramId, preferenceId, cancellationToken);
            }
            // –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
        }

        // ProcessUserStateAsync —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ TelegramBotServiceMethods.cs

        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ TelegramBotServiceMethods.cs

        // CreateCreateNotificationKeyboard —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ TelegramBotServiceMethods.cs

        private TelegramInlineKeyboardMarkup CreateSettingsListKeyboard(List<UserNotificationPreference> preferences)
        {
            var keyboard = new TelegramInlineKeyboardMarkup();

            foreach (var preference in preferences)
            {
                var status = preference.IsEnabled ? "‚úÖ" : "‚ùå";
                var keywords = string.IsNullOrEmpty(preference.Keywords) 
                    ? "–ù–∞—Å—Ç—Ä–æ–π–∫–∞" 
                    : preference.Keywords.Length > 15 
                        ? preference.Keywords.Substring(0, 15) + "..." 
                        : preference.Keywords;

                keyboard.InlineKeyboard.Add(new List<TelegramInlineKeyboardButton>
                {
                    new TelegramInlineKeyboardButton 
                    { 
                        Text = $"{status} {keywords}", 
                        CallbackData = TelegramBotStates.CallbackEdit + preference.Id 
                    }
                });
            }

            keyboard.InlineKeyboard.Add(new List<TelegramInlineKeyboardButton>
            {
                new TelegramInlineKeyboardButton 
                { 
                    Text = "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", 
                    CallbackData = TelegramBotStates.CallbackCreate 
                },
                new TelegramInlineKeyboardButton 
                { 
                    Text = "üîô –ù–∞–∑–∞–¥", 
                    CallbackData = TelegramBotStates.CallbackSettings 
                }
            });

            return keyboard;
        }

        // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (–±—É–¥—É—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω—ã)

        private async Task ShowMainMenuAsync(string chatId, string telegramId, CancellationToken cancellationToken)
        {
            var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
            if (user == null)
            {
                await HandleStartCommandAsync(chatId, telegramId, cancellationToken);
                return;
            }

            await _telegramService.SendNotificationAsync(chatId, 
                "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n/list - –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n/help - –°–ø—Ä–∞–≤–∫–∞", 
                cancellationToken);
        }

        private async Task ShowSettingsMenuAsync(string chatId, string telegramId, CancellationToken cancellationToken)
        {
            await HandleListCommandAsync(chatId, telegramId, cancellationToken);
        }

        private async Task HandleLinkCommandAsync(string chatId, string telegramId, string command, CancellationToken cancellationToken)
        {
            var parts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            
            if (parts.Length == 1)
            {
                // –ü—Ä–æ—Å—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /link –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
                var message = new StringBuilder();
                message.AppendLine("üîó <b>–ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ Telegram</b>");
                message.AppendLine();
                message.AppendLine("üí° <b>–ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):</b>");
                message.AppendLine("‚Ä¢ <code>/register email@example.com –ø–∞—Ä–æ–ª—å</code> - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç");
                message.AppendLine("‚Ä¢ <code>/login email@example.com –ø–∞—Ä–æ–ª—å</code> - –≤–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç");
                message.AppendLine();
                message.AppendLine("üìã <b>–ß–µ—Ä–µ–∑ —Å–∞–π—Ç (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±):</b>");
                message.AppendLine("1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç rare-books.ru");
                message.AppendLine("2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ —Å–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ");
                message.AppendLine("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª \"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\"");
                message.AppendLine("4. –ù–∞–∂–º–∏—Ç–µ \"–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram\"");
                message.AppendLine("5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω");
                message.AppendLine("6. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/link –í–ê–®_–¢–û–ö–ï–ù</code>");

                await _telegramService.SendNotificationAsync(chatId, message.ToString(), cancellationToken);
                return;
            }

            if (parts.Length != 2)
            {
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/link –í–ê–®_–¢–û–ö–ï–ù</code>", 
                    cancellationToken);
                return;
            }

            var token = parts[1].Trim().ToUpper();

            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ Telegram
                var telegramUser = await _telegramService.GetUserInfoAsync(chatId, cancellationToken);
                var telegramUsername = telegramUser?.Username;

                var result = await _linkService.LinkTelegramAccountAsync(token, telegramId, telegramUsername, cancellationToken);

                if (result.Success)
                {
                    var successMessage = new StringBuilder();
                    successMessage.AppendLine("üéâ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!</b>");
                    successMessage.AppendLine();
                    successMessage.AppendLine($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result.User.UserName ?? result.User.Email}");
                    successMessage.AppendLine();
                    successMessage.AppendLine("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:");
                    successMessage.AppendLine("‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞");
                    successMessage.AppendLine("‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∫–Ω–∏–≥–∞—Ö");
                    successMessage.AppendLine("‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:");
                    successMessage.AppendLine("  /settings - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏");
                    successMessage.AppendLine("  /list - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫");

                    await _telegramService.SendNotificationAsync(chatId, successMessage.ToString(), cancellationToken);
                }
                else
                {
                    await _telegramService.SendNotificationAsync(chatId, 
                        $"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏:</b> {result.ErrorMessage}", 
                        cancellationToken);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è Telegram ID {TelegramId}", telegramId);
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                    cancellationToken);
            }
        }

        private async Task HandleRegisterCommandAsync(string chatId, string telegramId, string command, CancellationToken cancellationToken)
        {
            var parts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            
            if (parts.Length == 1)
            {
                // –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ
                var helpMessage = new StringBuilder();
                helpMessage.AppendLine("üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</b>");
                helpMessage.AppendLine();
                helpMessage.AppendLine("–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:");
                helpMessage.AppendLine("<code>/register EMAIL –ü–ê–†–û–õ–¨</code>");
                helpMessage.AppendLine();
                helpMessage.AppendLine("–ü—Ä–∏–º–µ—Ä:");
                helpMessage.AppendLine("<code>/register ivan@example.com MyPassword123</code>");
                helpMessage.AppendLine();
                helpMessage.AppendLine("‚ö†Ô∏è <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:</b>");
                helpMessage.AppendLine("‚Ä¢ –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤");
                helpMessage.AppendLine("‚Ä¢ –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã");

                await _telegramService.SendNotificationAsync(chatId, helpMessage.ToString(), cancellationToken);
                return;
            }

            if (parts.Length != 3)
            {
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/register EMAIL –ü–ê–†–û–õ–¨</code>", 
                    cancellationToken);
                return;
            }

            var email = parts[1].Trim();
            var password = parts[2].Trim();

            try
            {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                var existingUser = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
                if (existingUser != null)
                {
                    await _telegramService.SendNotificationAsync(chatId, 
                        $"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {existingUser.Email}", 
                        cancellationToken);
                    return;
                }

                var result = await RegisterUserDirectlyAsync(email, password, telegramId, cancellationToken);

                if (result.IsSuccess)
                {
                    var successMessage = new StringBuilder();
                    successMessage.AppendLine("üéâ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω!</b>");
                    successMessage.AppendLine();
                    successMessage.AppendLine($"üìß Email: {email}");
                    successMessage.AppendLine($"üÜî Telegram ID: {telegramId}");
                    successMessage.AppendLine();
                    successMessage.AppendLine("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:");
                    successMessage.AppendLine("‚Ä¢ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
                    successMessage.AppendLine("‚Ä¢ /list - –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫");
                    successMessage.AppendLine("‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥–∞—Ö");

                    await _telegramService.SendNotificationAsync(chatId, successMessage.ToString(), cancellationToken);
                }
                else
                {
                    await _telegramService.SendNotificationAsync(chatId, 
                        $"‚ùå <b>–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {result.ErrorMessage}", 
                        cancellationToken);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram ID {TelegramId}", telegramId);
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                    cancellationToken);
            }
        }

        private async Task HandleLoginCommandAsync(string chatId, string telegramId, string command, CancellationToken cancellationToken)
        {
            var parts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            
            if (parts.Length == 1)
            {
                // –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ
                var helpMessage = new StringBuilder();
                helpMessage.AppendLine("üîë <b>–í—Ö–æ–¥ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç</b>");
                helpMessage.AppendLine();
                helpMessage.AppendLine("–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:");
                helpMessage.AppendLine("<code>/login EMAIL –ü–ê–†–û–õ–¨</code>");
                helpMessage.AppendLine();
                helpMessage.AppendLine("–ü—Ä–∏–º–µ—Ä:");
                helpMessage.AppendLine("<code>/login ivan@example.com MyPassword123</code>");
                helpMessage.AppendLine();
                helpMessage.AppendLine("üìù –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:");
                helpMessage.AppendLine("<code>/register EMAIL –ü–ê–†–û–õ–¨</code>");

                await _telegramService.SendNotificationAsync(chatId, helpMessage.ToString(), cancellationToken);
                return;
            }

            if (parts.Length != 3)
            {
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/login EMAIL –ü–ê–†–û–õ–¨</code>", 
                    cancellationToken);
                return;
            }

            var email = parts[1].Trim();
            var password = parts[2].Trim();

            try
            {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                var existingUser = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
                if (existingUser != null)
                {
                    await _telegramService.SendNotificationAsync(chatId, 
                        $"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {existingUser.Email}", 
                        cancellationToken);
                    return;
                }

                var result = await LoginUserDirectlyAsync(email, password, telegramId, cancellationToken);

                if (result.IsSuccess)
                {
                    var successMessage = new StringBuilder();
                    successMessage.AppendLine("üéâ <b>–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∏ –ø—Ä–∏–≤—è–∑–∫–∞!</b>");
                    successMessage.AppendLine();
                    successMessage.AppendLine($"üìß Email: {email}");
                    successMessage.AppendLine($"üÜî Telegram ID: {telegramId}");
                    successMessage.AppendLine();
                    successMessage.AppendLine("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:");
                    successMessage.AppendLine("‚Ä¢ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
                    successMessage.AppendLine("‚Ä¢ /list - –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫");
                    successMessage.AppendLine("‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥–∞—Ö");

                    await _telegramService.SendNotificationAsync(chatId, successMessage.ToString(), cancellationToken);
                }
                else
                {
                    await _telegramService.SendNotificationAsync(chatId, 
                        $"‚ùå <b>–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:</b> {result.ErrorMessage}", 
                        cancellationToken);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram ID {TelegramId}", telegramId);
                await _telegramService.SendNotificationAsync(chatId, 
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                    cancellationToken);
            }
        }

        private async Task ProcessUserStateAsync(string chatId, string telegramId, string messageText, TelegramUserState userState, CancellationToken cancellationToken)
        {
            switch (userState.State)
            {
                case TelegramBotStates.EditingKeywords:
                    await ProcessEditKeywordsStateAsync(chatId, telegramId, messageText, userState, cancellationToken);
                    break;
                case TelegramBotStates.EditingPrice:
                    await ProcessEditPriceStateAsync(chatId, telegramId, messageText, userState, cancellationToken);
                    break;
                case TelegramBotStates.CreatingNotification:
                    await ProcessCreateNotificationStateAsync(chatId, telegramId, messageText, userState, cancellationToken);
                    break;
                default:
                    await _telegramService.ClearUserStateAsync(telegramId, cancellationToken);
                    await ShowMainMenuAsync(chatId, telegramId, cancellationToken);
                    break;
            }
        }

        private async Task HandleLotsCommandAsync(string chatId, string telegramId, string command, CancellationToken cancellationToken)
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                var user = await _telegramService.FindUserByTelegramIdAsync(telegramId, cancellationToken);
                if (user == null)
                {
                    await _telegramService.SendNotificationAsync(chatId,
                        "‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.\n\n" +
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n" +
                        "‚Ä¢ <code>/register email@example.com –ø–∞—Ä–æ–ª—å</code>\n" +
                        "‚Ä¢ <code>/login email@example.com –ø–∞—Ä–æ–ª—å</code>",
                        cancellationToken);
                    return;
                }

                var parts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                int page = 1;
                int pageSize = 5;

                // –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if (parts.Length > 1 && int.TryParse(parts[1], out int requestedPage) && requestedPage > 0)
                {
                    page = requestedPage;
                }

                _logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {TelegramId} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {Page}", telegramId, page);

                using var scope = _scopeFactory.CreateScope();
                var usersContext = scope.ServiceProvider.GetRequiredService<UsersDbContext>();
                var booksContext = scope.ServiceProvider.GetRequiredService<BooksDbContext>();

                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                var notificationPreferences = await usersContext.UserNotificationPreferences
                    .Where(np => np.UserId == user.Id && np.IsEnabled)
                    .ToListAsync(cancellationToken);

                if (!notificationPreferences.Any())
                {
                    await _telegramService.SendNotificationAsync(chatId,
                        "üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞.\n\n" +
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/settings</code> –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥.",
                        cancellationToken);
                    return;
                }

                // –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                var activeLotsResult = await SearchActiveLotsForAllPreferencesAsync(booksContext, notificationPreferences, page, pageSize, cancellationToken);

                if (activeLotsResult.TotalCount == 0)
                {
                    await _telegramService.SendNotificationAsync(chatId,
                        "üì≠ <b>–ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤</b>\n\n" +
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n" +
                        "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞: <code>/settings</code>\n" +
                        "‚Ä¢ –†–∞—Å—à–∏—Ä–∏—Ç—å —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω\n" +
                        "‚Ä¢ –£–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –≥–æ—Ä–æ–¥—É –∏–ª–∏ –≥–æ–¥—É",
                        cancellationToken);
                    return;
                }

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                var message = await FormatGroupedLotsMessageAsync(activeLotsResult, page, pageSize, cancellationToken);
                
                _logger.LogInformation("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {TelegramId} —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å {Count} –ª–æ—Ç–∞–º–∏, —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: {MessageLength} —Å–∏–º–≤–æ–ª–æ–≤", 
                    telegramId, activeLotsResult.TotalCount, message.Length);
                    
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bool sendResult = await _telegramService.SendNotificationAsync(chatId, message, cancellationToken);
                
                if (sendResult) {
                    _logger.LogInformation("–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {TelegramId}", telegramId);
                } else {
                    _logger.LogError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {TelegramId}. –†–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: {MessageLength}", 
                        telegramId, message.Length);
                        
                    // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
                    await _telegramService.SendNotificationAsync(chatId, 
                        "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞</b>\n\n–í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è Telegram API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.", 
                        cancellationToken);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /lots –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TelegramId}", telegramId);
                await _telegramService.SendNotificationAsync(chatId,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    cancellationToken);
            }
        }

        private async Task<GroupedLotsSearchResult> SearchActiveLotsForAllPreferencesAsync(BooksDbContext booksContext, List<UserNotificationPreference> preferences, int page, int pageSize, CancellationToken cancellationToken)
        {
            var baseQuery = booksContext.BooksInfo.Include(b => b.Category).AsQueryable();
            
            // –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–∏
            var now = DateTime.UtcNow;
            baseQuery = baseQuery.Where(b => b.EndDate > now);
            
            var result = new GroupedLotsSearchResult
            {
                Groups = new List<PreferenceLotsGroup>(),
                Page = page,
                PageSize = pageSize
            };

            var allBooks = await baseQuery.AsNoTracking().ToListAsync(cancellationToken);
            
            foreach (var preference in preferences)
            {
                var matchingBooks = FilterBooksByPreference(allBooks, preference);
                
                if (matchingBooks.Any())
                {
                    var group = new PreferenceLotsGroup
                    {
                        PreferenceName = !string.IsNullOrEmpty(preference.Keywords) ? preference.Keywords : "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                        Books = matchingBooks.Take(pageSize).ToList(),
                        TotalCount = matchingBooks.Count
                    };
                    
                    result.Groups.Add(group);
                }
            }
            
            result.TotalCount = result.Groups.Sum(g => g.TotalCount);
            
            return result;
        }
        
        private List<RegularBaseBook> FilterBooksByPreference(List<RegularBaseBook> allBooks, UserNotificationPreference preference)
        {
            var filteredBooks = allBooks.Where(book => {
                // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
                if (preference.MinPrice > 0 && book.Price < (double)preference.MinPrice) return false;
                if (preference.MaxPrice > 0 && book.Price > (double)preference.MaxPrice) return false;
                
                // –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É –∏–∑–¥–∞–Ω–∏—è
                if (preference.MinYear > 0 && (!book.YearPublished.HasValue || book.YearPublished < preference.MinYear)) return false;
                if (preference.MaxYear > 0 && (!book.YearPublished.HasValue || book.YearPublished > preference.MaxYear)) return false;
                
                // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                var categoryIds = preference.GetCategoryIdsList();
                if (categoryIds.Any() && !categoryIds.Contains(book.CategoryId)) return false;
                
                // –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥–∞–º
                var cities = preference.GetCitiesList();
                if (cities.Any())
                {
                    var normalizedCities = cities.Select(c => c.ToLower()).ToList();
                    if (!normalizedCities.Any(city => book.City?.ToLower().Contains(city) == true)) return false;
                }
                
                return true;
            }).ToList();
            
            // –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            var keywords = preference.GetKeywordsList();
            if (keywords.Any())
            {
                filteredBooks = filteredBooks.Where(book => {
                    return keywords.All(keyword => {
                        var lowerKeyword = keyword.ToLower();
                        
                        // –ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                        if (book.Title?.ToLower().Contains(lowerKeyword) == true) return true;
                        if (book.NormalizedTitle?.Contains(lowerKeyword) == true) return true;
                        
                        // –ü–æ–∏—Å–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                        if (book.Description?.ToLower().Contains(lowerKeyword) == true) return true;
                        if (book.NormalizedDescription?.Contains(lowerKeyword) == true) return true;
                        
                        // –ü–æ–∏—Å–∫ –≤ —Ç–µ–≥–∞—Ö
                        if (book.Tags?.Any(tag => tag.ToLower().Contains(lowerKeyword)) == true) return true;
                        
                        // –°—Ç–µ–º–º–∏–Ω–≥ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                        try
                        {
                            string detectedLanguage;
                            var processedKeyword = PreprocessText(keyword, out detectedLanguage);
                            var keywordParts = processedKeyword.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                            
                            return keywordParts.All(part =>
                                (book.NormalizedTitle?.Contains(part) == true) ||
                                (book.NormalizedDescription?.Contains(part) == true));
                        }
                        catch
                        {
                            return false;
                        }
                    });
                }).ToList();
            }
            
            return filteredBooks.OrderBy(b => b.EndDate).ToList();
        }
        
         private async Task<string> FormatGroupedLotsMessageAsync(GroupedLotsSearchResult result, int page, int pageSize, CancellationToken cancellationToken)
         {
             var message = new StringBuilder();
             var totalPages = (int)Math.Ceiling((double)result.TotalCount / pageSize);

             message.AppendLine("üìö <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º</b>");
             message.AppendLine();
             message.AppendLine($"üìä –ù–∞–π–¥–µ–Ω–æ: {result.TotalCount} –ª–æ—Ç–æ–≤");
             message.AppendLine($"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}/{totalPages}");
             message.AppendLine();

             foreach (var group in result.Groups)
             {
                 if (group.Books.Any())
                 {
                     message.AppendLine($"üîç <b>{group.PreferenceName}</b> ({group.TotalCount} –ª–æ—Ç–æ–≤):");
                     message.AppendLine();

                     int index = 1;
                     foreach (var book in group.Books.Take(5)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 5 –ª–æ—Ç–æ–≤ –Ω–∞ –≥—Ä—É–ø–ø—É
                     {
                         message.AppendLine($"<b>{index}. {book.Title}</b>");
                         message.AppendLine($"üí∞ <b>{book.Price:N0} ‚ÇΩ</b>");
                         message.AppendLine($"‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: <b>{book.EndDate:dd.MM.yyyy HH:mm}</b>");
                         message.AppendLine($"üîó <a href=\"https://meshok.net/item/{book.Id}\">–û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç ‚Ññ{book.Id}</a>");
                         message.AppendLine();
                         index++;
                     }

                     if (group.TotalCount > 5)
                     {
                         message.AppendLine($"... –∏ –µ—â–µ {group.TotalCount - 5} –ª–æ—Ç–æ–≤ –ø–æ —ç—Ç–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é");
                         message.AppendLine();
                     }
                 }
             }

             // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
             if (totalPages > 1)
             {
                 message.AppendLine("üìñ <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è:</b>");
                 if (page > 1)
                     message.AppendLine($"  <code>/lots {page - 1}</code> - –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞");
                 if (page < totalPages)
                     message.AppendLine($"  <code>/lots {page + 1}</code> - —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞");
                 message.AppendLine($"  <code>/lots [–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã]</code> - –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É");
                 message.AppendLine();
             }

             message.AppendLine("‚öôÔ∏è <code>/settings</code> - –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞");
             
             // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
             string resultMessage = message.ToString();
             
             // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram - –ø—Ä–∏–º–µ—Ä–Ω–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
             if (resultMessage.Length > 4000)
             {
                 // –°–æ–∑–¥–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                 var shortMessage = new StringBuilder();
                 shortMessage.AppendLine("üìö <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º</b>");
                 shortMessage.AppendLine();
                 shortMessage.AppendLine($"üìä –ù–∞–π–¥–µ–Ω–æ: {result.TotalCount} –ª–æ—Ç–æ–≤");
                 shortMessage.AppendLine($"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}/{totalPages}");
                 shortMessage.AppendLine();
                 
                 // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É —Å –æ–¥–Ω–∏–º –ª–æ—Ç–æ–º
                 if (result.Groups.Any() && result.Groups.First().Books.Any())
                 {
                     var firstGroup = result.Groups.First();
                     var book = firstGroup.Books.First();
                     shortMessage.AppendLine($"üîç <b>{firstGroup.PreferenceName}</b> (–ø—Ä–∏–º–µ—Ä –∏–∑ {firstGroup.TotalCount} –ª–æ—Ç–æ–≤):");
                     shortMessage.AppendLine();
                     shortMessage.AppendLine($"<b>1. {book.Title}</b>");
                     shortMessage.AppendLine($"üí∞ <b>{book.Price:N0} ‚ÇΩ</b>");
                     shortMessage.AppendLine($"‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: <b>{book.EndDate:dd.MM.yyyy HH:mm}</b>");
                     shortMessage.AppendLine($"üîó <a href=\"https://meshok.net/item/{book.Id}\">–û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç ‚Ññ{book.Id}</a>");
                     shortMessage.AppendLine();
                 }
                 
                 shortMessage.AppendLine("‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</b> –Ω–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
                 shortMessage.AppendLine("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É—Ç–æ—á–Ω–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.");
                 shortMessage.AppendLine();
                 shortMessage.AppendLine("‚öôÔ∏è <code>/settings</code> - –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞");
                 
                 resultMessage = shortMessage.ToString();
             }

             return resultMessage;
         }

         private async Task<string> FormatLotsMessageAsync(LotsSearchResult result, int page, int pageSize, UserNotificationPreference preferences, CancellationToken cancellationToken)
         {
             _logger.LogInformation("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: {Count} –∫–Ω–∏–≥ –∏–∑ {TotalCount}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {Page}/{TotalPages}",
                result.Books.Count, result.TotalCount, page, (int)Math.Ceiling((double)result.TotalCount / pageSize));
                
             var message = new StringBuilder();

             var totalPages = (int)Math.Ceiling((double)result.TotalCount / pageSize);

             message.AppendLine("üìö <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º</b>");
             message.AppendLine();
             message.AppendLine($"üìä –ù–∞–π–¥–µ–Ω–æ: {result.TotalCount} –ª–æ—Ç–æ–≤");
             message.AppendLine($"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}/{totalPages}");
             message.AppendLine();

             // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
             var criteriaLines = new List<string>();
             if (!string.IsNullOrEmpty(preferences.Keywords))
                 criteriaLines.Add($"üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {preferences.Keywords}");
             if (preferences.MinPrice > 0 || preferences.MaxPrice > 0)
                 criteriaLines.Add($"üí∞ –¶–µ–Ω–∞: {(preferences.MinPrice > 0 ? $"–æ—Ç {preferences.MinPrice:N0} ‚ÇΩ" : "")} {(preferences.MaxPrice > 0 ? $"–¥–æ {preferences.MaxPrice:N0} ‚ÇΩ" : "")}".Trim());
             if (preferences.MinYear > 0 || preferences.MaxYear > 0)
                 criteriaLines.Add($"üìÖ –ì–æ–¥: {(preferences.MinYear > 0 ? $"–æ—Ç {preferences.MinYear}" : "")} {(preferences.MaxYear > 0 ? $"–¥–æ {preferences.MaxYear}" : "")}".Trim());
             if (!string.IsNullOrEmpty(preferences.Cities))
                 criteriaLines.Add($"üèôÔ∏è –ì–æ—Ä–æ–¥–∞: {preferences.Cities}");

             if (criteriaLines.Any())
             {
                 message.AppendLine("<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:</b>");
                 foreach (var criteria in criteriaLines)
                 {
                     message.AppendLine($"  {criteria}");
                 }
                 message.AppendLine();
             }

             int index = (page - 1) * pageSize + 1;
             foreach (var book in result.Books)
             {
                 // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                 
                 // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                 message.AppendLine($"<b>{index}. {book.Title}</b>");
                 
                 // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
                 message.AppendLine($"üí∞ <b>{book.Price:N0} ‚ÇΩ</b>");
                 
                 // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤
                 message.AppendLine($"‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: <b>{book.EndDate:dd.MM.yyyy HH:mm}</b>");
                 
                 // –°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
                 message.AppendLine($"üîó <a href=\"https://meshok.net/item/{book.Id}\">–û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç ‚Ññ{book.Id}</a>");
                 
                 message.AppendLine(); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏
                 index++;
             }

             // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
             if (totalPages > 1)
             {
                 message.AppendLine("üìñ <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è:</b>");
                 if (page > 1)
                     message.AppendLine($"  <code>/lots {page - 1}</code> - –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞");
                 if (page < totalPages)
                     message.AppendLine($"  <code>/lots {page + 1}</code> - —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞");
                 message.AppendLine($"  <code>/lots [–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã]</code> - –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É");
                 message.AppendLine();
             }

             message.AppendLine("‚öôÔ∏è <code>/settings</code> - –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞");
             
             // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
             string resultMessage = message.ToString();
             _logger.LogInformation("–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: {MessageLength} —Å–∏–º–≤–æ–ª–æ–≤", resultMessage.Length);
             
             // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram - –ø—Ä–∏–º–µ—Ä–Ω–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
             if (resultMessage.Length > 4000)
             {
                 _logger.LogWarning("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({Length} —Å–∏–º–≤–æ–ª–æ–≤). –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.", resultMessage.Length);
                 
                 // –°–æ–∑–¥–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                 var shortMessage = new StringBuilder();
                 shortMessage.AppendLine("üìö <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º</b>");
                 shortMessage.AppendLine();
                 shortMessage.AppendLine($"üìä –ù–∞–π–¥–µ–Ω–æ: {result.TotalCount} –ª–æ—Ç–æ–≤");
                 shortMessage.AppendLine($"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}/{totalPages}");
                 shortMessage.AppendLine();
                 
                 // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ª–æ—Ç –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
                 if (result.Books.Any())
                 {
                     var book = result.Books.First();
                     shortMessage.AppendLine("<b>–ü—Ä–∏–º–µ—Ä –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞:</b>");
                     shortMessage.AppendLine($"<b>1. {book.Title}</b>");
                     shortMessage.AppendLine($"üí∞ <b>{book.Price:N0} ‚ÇΩ</b>");
                     shortMessage.AppendLine($"‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: <b>{book.EndDate:dd.MM.yyyy HH:mm}</b>");
                     shortMessage.AppendLine($"üîó <a href=\"https://meshok.net/item/{book.Id}\">–û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç ‚Ññ{book.Id}</a>");
                     shortMessage.AppendLine();
                 }
                 
                 shortMessage.AppendLine("‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</b> –Ω–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.");
                 shortMessage.AppendLine("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É—Ç–æ—á–Ω–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.");
                 shortMessage.AppendLine();
                 shortMessage.AppendLine("‚öôÔ∏è <code>/settings</code> - –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞");
                 
                 resultMessage = shortMessage.ToString();
                 _logger.LogInformation("–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: {MessageLength} —Å–∏–º–≤–æ–ª–æ–≤", resultMessage.Length);
             }

             return resultMessage;
         }

        private async Task<DirectAuthResult> RegisterUserDirectlyAsync(string email, string password, string telegramId, CancellationToken cancellationToken)
        {
            using var scope = _scopeFactory.CreateScope();
            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
            var context = scope.ServiceProvider.GetRequiredService<UsersDbContext>();

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email
                if (string.IsNullOrWhiteSpace(email) || !email.Contains("@"))
                {
                    return DirectAuthResult.Fail("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
                if (string.IsNullOrWhiteSpace(password) || password.Length < 6)
                {
                    return DirectAuthResult.Fail("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
                var existingUser = await userManager.FindByEmailAsync(email);
                if (existingUser != null)
                {
                    return DirectAuthResult.Fail("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —ç—Ç–æ—Ç Telegram ID –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
                var userWithTelegramId = await context.Users
                    .FirstOrDefaultAsync(u => u.TelegramId == telegramId, cancellationToken);
                if (userWithTelegramId != null)
                {
                    return DirectAuthResult.Fail($"–≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ {userWithTelegramId.Email}");
                }

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                var newUser = new ApplicationUser
                {
                    UserName = email,
                    Email = email,
                    EmailConfirmed = true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email –¥–ª—è Telegram —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    TelegramId = telegramId,
                    Role = "User",
                    CreatedAt = DateTime.UtcNow
                };

                var result = await userManager.CreateAsync(newUser, password);

                if (result.Succeeded)
                {
                    _logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {Email} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram ID {TelegramId}", email, telegramId);
                    return DirectAuthResult.Success(newUser);
                }
                else
                {
                    var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                    return DirectAuthResult.Fail($"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {errors}");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {Email} —á–µ—Ä–µ–∑ Telegram", email);
                return DirectAuthResult.Fail("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            }
        }

        private async Task<DirectAuthResult> LoginUserDirectlyAsync(string email, string password, string telegramId, CancellationToken cancellationToken)
        {
            using var scope = _scopeFactory.CreateScope();
            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
            var signInManager = scope.ServiceProvider.GetRequiredService<SignInManager<ApplicationUser>>();
            var context = scope.ServiceProvider.GetRequiredService<UsersDbContext>();

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email
                if (string.IsNullOrWhiteSpace(email) || !email.Contains("@"))
                {
                    return DirectAuthResult.Fail("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å");
                }

                // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                var user = await userManager.FindByEmailAsync(email);
                if (user == null)
                {
                    return DirectAuthResult.Fail("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
                var passwordCheck = await signInManager.CheckPasswordSignInAsync(user, password, false);
                if (!passwordCheck.Succeeded)
                {
                    return DirectAuthResult.Fail("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –∫ –¥—Ä—É–≥–æ–º—É Telegram
                if (!string.IsNullOrEmpty(user.TelegramId) && user.TelegramId != telegramId)
                {
                    return DirectAuthResult.Fail("–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram");
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —ç—Ç–æ—Ç Telegram ID –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
                if (string.IsNullOrEmpty(user.TelegramId))
                {
                    var userWithTelegramId = await context.Users
                        .FirstOrDefaultAsync(u => u.TelegramId == telegramId, cancellationToken);
                    if (userWithTelegramId != null)
                    {
                        return DirectAuthResult.Fail($"–≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ {userWithTelegramId.Email}");
                    }

                    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID
                    user.TelegramId = telegramId;
                    await userManager.UpdateAsync(user);
                }

                _logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {Email} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª —á–µ—Ä–µ–∑ Telegram ID {TelegramId}", email, telegramId);
                return DirectAuthResult.Success(user);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {Email} —á–µ—Ä–µ–∑ Telegram", email);
                return DirectAuthResult.Fail("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            }
        }

        // –ú–µ—Ç–æ–¥—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ TelegramBotServiceExtended.cs
        
        // ------------------- –ü–û–ú–û–ì–ê–Æ–©–ò–ô –ú–ï–¢–û–î: –¥–µ—Ç–µ–∫—Ç —è–∑—ã–∫–∞ + —Å—Ç–µ–º–º–∏–Ω–≥ -----------        
        private string PreprocessText(string text, out string detectedLanguage)
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ—Ç–µ–∫—Ç–æ—Ä
            detectedLanguage = DetectLanguage(text);
            if (detectedLanguage == "bul" || detectedLanguage == "ukr" || detectedLanguage == "mkd")
                detectedLanguage = "rus";

            if (!_stemmers.ContainsKey(detectedLanguage))
            {
                throw new NotSupportedException($"Language {detectedLanguage} is not supported.");
            }

            var stemmer = _stemmers[detectedLanguage];
            // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É —Å –ø–æ–º–æ—â—å—é ToLowerInvariant –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
            var normalizedText = Regex.Replace(text.ToLowerInvariant(), @"\p{P}", " ");
            var words = normalizedText.Split(' ', StringSplitOptions.RemoveEmptyEntries)
                                      .Select(word => stemmer.Stem(word));
            return string.Join(" ", words);
        }

        private string DetectLanguage(string text)
        {
            return _languageDetector.Detect(text);
        }
    }

    public class DirectAuthResult
    {
        public bool IsSuccess { get; private set; }
        public string ErrorMessage { get; private set; }
        public ApplicationUser User { get; private set; }

        private DirectAuthResult(bool isSuccess, string errorMessage, ApplicationUser user)
        {
            IsSuccess = isSuccess;
            ErrorMessage = errorMessage;
            User = user;
        }

        public static DirectAuthResult Success(ApplicationUser user)
        {
            return new DirectAuthResult(true, null, user);
        }

        public static DirectAuthResult Fail(string errorMessage)
        {
            return new DirectAuthResult(false, errorMessage, null);
        }
    }

    public class LotsSearchResult
    {
        public List<RegularBaseBook> Books { get; set; } = new();
        public int TotalCount { get; set; }
        public int Page { get; set; }
        public int PageSize { get; set; }
    }
    
    public class GroupedLotsSearchResult
    {
        public List<PreferenceLotsGroup> Groups { get; set; } = new();
        public int TotalCount { get; set; }
        public int Page { get; set; }
        public int PageSize { get; set; }
    }
    
    public class PreferenceLotsGroup
    {
        public string PreferenceName { get; set; } = string.Empty;
        public List<RegularBaseBook> Books { get; set; } = new();
        public int TotalCount { get; set; }
    }
}

